/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      State: StateObject
      StateConnection: StateConnectionObject
      PageInfo: PageInfoObject
      StateEdge: StateEdgeObject
      AggregateState: AggregateStateObject
      User: UserObject
      Post: PostObject
      UserConnection: UserConnectionObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      PostConnection: PostConnectionObject
      PostEdge: PostEdgeObject
      AggregatePost: AggregatePostObject
      Hero: HeroObject
      Friend: FriendObject
      HeroConnection: HeroConnectionObject
      HeroEdge: HeroEdgeObject
      AggregateHero: AggregateHeroObject
      FriendConnection: FriendConnectionObject
      FriendEdge: FriendEdgeObject
      AggregateFriend: AggregateFriendObject
      Client: ClientObject
      Position: PositionObject
      ClientConnection: ClientConnectionObject
      ClientEdge: ClientEdgeObject
      AggregateClient: AggregateClientObject
      PositionConnection: PositionConnectionObject
      PositionEdge: PositionEdgeObject
      AggregatePosition: AggregatePositionObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      StateSubscriptionPayload: StateSubscriptionPayloadObject
      StatePreviousValues: StatePreviousValuesObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      PostSubscriptionPayload: PostSubscriptionPayloadObject
      PostPreviousValues: PostPreviousValuesObject
      HeroSubscriptionPayload: HeroSubscriptionPayloadObject
      HeroPreviousValues: HeroPreviousValuesObject
      FriendSubscriptionPayload: FriendSubscriptionPayloadObject
      FriendPreviousValues: FriendPreviousValuesObject
      ClientSubscriptionPayload: ClientSubscriptionPayloadObject
      ClientPreviousValues: ClientPreviousValuesObject
      PositionSubscriptionPayload: PositionSubscriptionPayloadObject
      PositionPreviousValues: PositionPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      State: StateFieldDetails
      StateConnection: StateConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      StateEdge: StateEdgeFieldDetails
      AggregateState: AggregateStateFieldDetails
      User: UserFieldDetails
      Post: PostFieldDetails
      UserConnection: UserConnectionFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      PostConnection: PostConnectionFieldDetails
      PostEdge: PostEdgeFieldDetails
      AggregatePost: AggregatePostFieldDetails
      Hero: HeroFieldDetails
      Friend: FriendFieldDetails
      HeroConnection: HeroConnectionFieldDetails
      HeroEdge: HeroEdgeFieldDetails
      AggregateHero: AggregateHeroFieldDetails
      FriendConnection: FriendConnectionFieldDetails
      FriendEdge: FriendEdgeFieldDetails
      AggregateFriend: AggregateFriendFieldDetails
      Client: ClientFieldDetails
      Position: PositionFieldDetails
      ClientConnection: ClientConnectionFieldDetails
      ClientEdge: ClientEdgeFieldDetails
      AggregateClient: AggregateClientFieldDetails
      PositionConnection: PositionConnectionFieldDetails
      PositionEdge: PositionEdgeFieldDetails
      AggregatePosition: AggregatePositionFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      StateSubscriptionPayload: StateSubscriptionPayloadFieldDetails
      StatePreviousValues: StatePreviousValuesFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      PostSubscriptionPayload: PostSubscriptionPayloadFieldDetails
      PostPreviousValues: PostPreviousValuesFieldDetails
      HeroSubscriptionPayload: HeroSubscriptionPayloadFieldDetails
      HeroPreviousValues: HeroPreviousValuesFieldDetails
      FriendSubscriptionPayload: FriendSubscriptionPayloadFieldDetails
      FriendPreviousValues: FriendPreviousValuesFieldDetails
      ClientSubscriptionPayload: ClientSubscriptionPayloadFieldDetails
      ClientPreviousValues: ClientPreviousValuesFieldDetails
      PositionSubscriptionPayload: PositionSubscriptionPayloadFieldDetails
      PositionPreviousValues: PositionPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      StateWhereUniqueInput: StateWhereUniqueInputInputObject
      StateWhereInput: StateWhereInputInputObject
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      PostWhereInput: PostWhereInputInputObject
      UserWhereInput: UserWhereInputInputObject
      PostWhereUniqueInput: PostWhereUniqueInputInputObject
      HeroWhereUniqueInput: HeroWhereUniqueInputInputObject
      FriendWhereInput: FriendWhereInputInputObject
      HeroWhereInput: HeroWhereInputInputObject
      FriendWhereUniqueInput: FriendWhereUniqueInputInputObject
      ClientWhereUniqueInput: ClientWhereUniqueInputInputObject
      PositionWhereInput: PositionWhereInputInputObject
      ClientWhereInput: ClientWhereInputInputObject
      PositionWhereUniqueInput: PositionWhereUniqueInputInputObject
      StateCreateInput: StateCreateInputInputObject
      StateUpdateInput: StateUpdateInputInputObject
      StateUpdateManyMutationInput: StateUpdateManyMutationInputInputObject
      UserCreateInput: UserCreateInputInputObject
      PostCreateManyWithoutAuthorInput: PostCreateManyWithoutAuthorInputInputObject
      PostCreateWithoutAuthorInput: PostCreateWithoutAuthorInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      PostUpdateManyWithoutAuthorInput: PostUpdateManyWithoutAuthorInputInputObject
      PostUpdateWithWhereUniqueWithoutAuthorInput: PostUpdateWithWhereUniqueWithoutAuthorInputInputObject
      PostUpdateWithoutAuthorDataInput: PostUpdateWithoutAuthorDataInputInputObject
      PostUpsertWithWhereUniqueWithoutAuthorInput: PostUpsertWithWhereUniqueWithoutAuthorInputInputObject
      PostScalarWhereInput: PostScalarWhereInputInputObject
      PostUpdateManyWithWhereNestedInput: PostUpdateManyWithWhereNestedInputInputObject
      PostUpdateManyDataInput: PostUpdateManyDataInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      PostCreateInput: PostCreateInputInputObject
      UserCreateOneWithoutPostsInput: UserCreateOneWithoutPostsInputInputObject
      UserCreateWithoutPostsInput: UserCreateWithoutPostsInputInputObject
      PostUpdateInput: PostUpdateInputInputObject
      UserUpdateOneWithoutPostsInput: UserUpdateOneWithoutPostsInputInputObject
      UserUpdateWithoutPostsDataInput: UserUpdateWithoutPostsDataInputInputObject
      UserUpsertWithoutPostsInput: UserUpsertWithoutPostsInputInputObject
      PostUpdateManyMutationInput: PostUpdateManyMutationInputInputObject
      HeroCreateInput: HeroCreateInputInputObject
      FriendCreateManyWithoutPartnerInput: FriendCreateManyWithoutPartnerInputInputObject
      FriendCreateWithoutPartnerInput: FriendCreateWithoutPartnerInputInputObject
      HeroUpdateInput: HeroUpdateInputInputObject
      FriendUpdateManyWithoutPartnerInput: FriendUpdateManyWithoutPartnerInputInputObject
      FriendUpdateWithWhereUniqueWithoutPartnerInput: FriendUpdateWithWhereUniqueWithoutPartnerInputInputObject
      FriendUpdateWithoutPartnerDataInput: FriendUpdateWithoutPartnerDataInputInputObject
      FriendUpsertWithWhereUniqueWithoutPartnerInput: FriendUpsertWithWhereUniqueWithoutPartnerInputInputObject
      FriendScalarWhereInput: FriendScalarWhereInputInputObject
      FriendUpdateManyWithWhereNestedInput: FriendUpdateManyWithWhereNestedInputInputObject
      FriendUpdateManyDataInput: FriendUpdateManyDataInputInputObject
      HeroUpdateManyMutationInput: HeroUpdateManyMutationInputInputObject
      FriendCreateInput: FriendCreateInputInputObject
      HeroCreateOneWithoutFriendsInput: HeroCreateOneWithoutFriendsInputInputObject
      HeroCreateWithoutFriendsInput: HeroCreateWithoutFriendsInputInputObject
      FriendUpdateInput: FriendUpdateInputInputObject
      HeroUpdateOneWithoutFriendsInput: HeroUpdateOneWithoutFriendsInputInputObject
      HeroUpdateWithoutFriendsDataInput: HeroUpdateWithoutFriendsDataInputInputObject
      HeroUpsertWithoutFriendsInput: HeroUpsertWithoutFriendsInputInputObject
      FriendUpdateManyMutationInput: FriendUpdateManyMutationInputInputObject
      ClientCreateInput: ClientCreateInputInputObject
      StateCreateOneInput: StateCreateOneInputInputObject
      PositionCreateManyWithoutClientRefInput: PositionCreateManyWithoutClientRefInputInputObject
      PositionCreateWithoutClientRefInput: PositionCreateWithoutClientRefInputInputObject
      ClientUpdateInput: ClientUpdateInputInputObject
      StateUpdateOneRequiredInput: StateUpdateOneRequiredInputInputObject
      StateUpdateDataInput: StateUpdateDataInputInputObject
      StateUpsertNestedInput: StateUpsertNestedInputInputObject
      PositionUpdateManyWithoutClientRefInput: PositionUpdateManyWithoutClientRefInputInputObject
      PositionUpdateWithWhereUniqueWithoutClientRefInput: PositionUpdateWithWhereUniqueWithoutClientRefInputInputObject
      PositionUpdateWithoutClientRefDataInput: PositionUpdateWithoutClientRefDataInputInputObject
      PositionUpsertWithWhereUniqueWithoutClientRefInput: PositionUpsertWithWhereUniqueWithoutClientRefInputInputObject
      PositionScalarWhereInput: PositionScalarWhereInputInputObject
      PositionUpdateManyWithWhereNestedInput: PositionUpdateManyWithWhereNestedInputInputObject
      PositionUpdateManyDataInput: PositionUpdateManyDataInputInputObject
      ClientUpdateManyMutationInput: ClientUpdateManyMutationInputInputObject
      PositionCreateInput: PositionCreateInputInputObject
      ClientCreateManyWithoutPositionsInput: ClientCreateManyWithoutPositionsInputInputObject
      ClientCreateWithoutPositionsInput: ClientCreateWithoutPositionsInputInputObject
      PositionUpdateInput: PositionUpdateInputInputObject
      ClientUpdateManyWithoutPositionsInput: ClientUpdateManyWithoutPositionsInputInputObject
      ClientUpdateWithWhereUniqueWithoutPositionsInput: ClientUpdateWithWhereUniqueWithoutPositionsInputInputObject
      ClientUpdateWithoutPositionsDataInput: ClientUpdateWithoutPositionsDataInputInputObject
      ClientUpsertWithWhereUniqueWithoutPositionsInput: ClientUpsertWithWhereUniqueWithoutPositionsInputInputObject
      ClientScalarWhereInput: ClientScalarWhereInputInputObject
      ClientUpdateManyWithWhereNestedInput: ClientUpdateManyWithWhereNestedInputInputObject
      ClientUpdateManyDataInput: ClientUpdateManyDataInputInputObject
      PositionUpdateManyMutationInput: PositionUpdateManyMutationInputInputObject
      StateSubscriptionWhereInput: StateSubscriptionWhereInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      PostSubscriptionWhereInput: PostSubscriptionWhereInputInputObject
      HeroSubscriptionWhereInput: HeroSubscriptionWhereInputInputObject
      FriendSubscriptionWhereInput: FriendSubscriptionWhereInputInputObject
      ClientSubscriptionWhereInput: ClientSubscriptionWhereInputInputObject
      PositionSubscriptionWhereInput: PositionSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    StateOrderByInput: StateOrderByInputValues,
    PostOrderByInput: PostOrderByInputValues,
    UserOrderByInput: UserOrderByInputValues,
    FriendOrderByInput: FriendOrderByInputValues,
    HeroOrderByInput: HeroOrderByInputValues,
    PositionOrderByInput: PositionOrderByInputValues,
    ClientOrderByInput: ClientOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'state', args?: QueryStateArgs[] | false, alias?: string  } 
  | { name: 'states', args?: QueryStatesArgs[] | false, alias?: string  } 
  | { name: 'statesConnection', args?: QueryStatesConnectionArgs[] | false, alias?: string  } 
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'post', args?: QueryPostArgs[] | false, alias?: string  } 
  | { name: 'posts', args?: QueryPostsArgs[] | false, alias?: string  } 
  | { name: 'postsConnection', args?: QueryPostsConnectionArgs[] | false, alias?: string  } 
  | { name: 'hero', args?: QueryHeroArgs[] | false, alias?: string  } 
  | { name: 'heroes', args?: QueryHeroesArgs[] | false, alias?: string  } 
  | { name: 'heroesConnection', args?: QueryHeroesConnectionArgs[] | false, alias?: string  } 
  | { name: 'friend', args?: QueryFriendArgs[] | false, alias?: string  } 
  | { name: 'friends', args?: QueryFriendsArgs[] | false, alias?: string  } 
  | { name: 'friendsConnection', args?: QueryFriendsConnectionArgs[] | false, alias?: string  } 
  | { name: 'client', args?: QueryClientArgs[] | false, alias?: string  } 
  | { name: 'clients', args?: QueryClientsArgs[] | false, alias?: string  } 
  | { name: 'clientsConnection', args?: QueryClientsConnectionArgs[] | false, alias?: string  } 
  | { name: 'position', args?: QueryPositionArgs[] | false, alias?: string  } 
  | { name: 'positions', args?: QueryPositionsArgs[] | false, alias?: string  } 
  | { name: 'positionsConnection', args?: QueryPositionsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'state'
  | 'states'
  | 'statesConnection'
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'post'
  | 'posts'
  | 'postsConnection'
  | 'hero'
  | 'heroes'
  | 'heroesConnection'
  | 'friend'
  | 'friends'
  | 'friendsConnection'
  | 'client'
  | 'clients'
  | 'clientsConnection'
  | 'position'
  | 'positions'
  | 'positionsConnection'


type QueryStateArgs =
  | 'where'
type QueryStatesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryStatesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPostArgs =
  | 'where'
type QueryPostsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPostsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryHeroArgs =
  | 'where'
type QueryHeroesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryHeroesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryFriendArgs =
  | 'where'
type QueryFriendsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryFriendsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryClientArgs =
  | 'where'
type QueryClientsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryClientsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPositionArgs =
  | 'where'
type QueryPositionsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPositionsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  state: {
    type: 'State'
    args: Record<QueryStateArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: StateWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.State | null> | prisma.State | null
  }
  states: {
    type: 'State'
    args: Record<QueryStatesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: StateWhereInput | null, orderBy?: prisma.StateOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.State[]> | prisma.State[]
  }
  statesConnection: {
    type: 'StateConnection'
    args: Record<QueryStatesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: StateWhereInput | null, orderBy?: prisma.StateOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.StateConnection> | prisma.StateConnection
  }
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  post: {
    type: 'Post'
    args: Record<QueryPostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PostWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post | null> | prisma.Post | null
  }
  posts: {
    type: 'Post'
    args: Record<QueryPostsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PostWhereInput | null, orderBy?: prisma.PostOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post[]> | prisma.Post[]
  }
  postsConnection: {
    type: 'PostConnection'
    args: Record<QueryPostsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PostWhereInput | null, orderBy?: prisma.PostOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostConnection> | prisma.PostConnection
  }
  hero: {
    type: 'Hero'
    args: Record<QueryHeroArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: HeroWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Hero | null> | prisma.Hero | null
  }
  heroes: {
    type: 'Hero'
    args: Record<QueryHeroesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: HeroWhereInput | null, orderBy?: prisma.HeroOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Hero[]> | prisma.Hero[]
  }
  heroesConnection: {
    type: 'HeroConnection'
    args: Record<QueryHeroesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: HeroWhereInput | null, orderBy?: prisma.HeroOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HeroConnection> | prisma.HeroConnection
  }
  friend: {
    type: 'Friend'
    args: Record<QueryFriendArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: FriendWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Friend | null> | prisma.Friend | null
  }
  friends: {
    type: 'Friend'
    args: Record<QueryFriendsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FriendWhereInput | null, orderBy?: prisma.FriendOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Friend[]> | prisma.Friend[]
  }
  friendsConnection: {
    type: 'FriendConnection'
    args: Record<QueryFriendsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FriendWhereInput | null, orderBy?: prisma.FriendOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FriendConnection> | prisma.FriendConnection
  }
  client: {
    type: 'Client'
    args: Record<QueryClientArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ClientWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Client | null> | prisma.Client | null
  }
  clients: {
    type: 'Client'
    args: Record<QueryClientsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ClientWhereInput | null, orderBy?: prisma.ClientOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Client[]> | prisma.Client[]
  }
  clientsConnection: {
    type: 'ClientConnection'
    args: Record<QueryClientsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ClientWhereInput | null, orderBy?: prisma.ClientOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ClientConnection> | prisma.ClientConnection
  }
  position: {
    type: 'Position'
    args: Record<QueryPositionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PositionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Position | null> | prisma.Position | null
  }
  positions: {
    type: 'Position'
    args: Record<QueryPositionsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PositionWhereInput | null, orderBy?: prisma.PositionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Position[]> | prisma.Position[]
  }
  positionsConnection: {
    type: 'PositionConnection'
    args: Record<QueryPositionsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PositionWhereInput | null, orderBy?: prisma.PositionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PositionConnection> | prisma.PositionConnection
  }
}
  

// Types for State

type StateObject =
  | StateFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'abbreviation', args?: [] | false, alias?: string  } 

type StateFields =
  | 'id'
  | 'name'
  | 'abbreviation'



  

export interface StateFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  abbreviation: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for StateConnection

type StateConnectionObject =
  | StateConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type StateConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface StateConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"StateConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'StateEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"StateConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.StateEdge[]> | prisma.StateEdge[]
  }
  aggregate: {
    type: 'AggregateState'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"StateConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateState> | prisma.AggregateState
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for StateEdge

type StateEdgeObject =
  | StateEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type StateEdgeFields =
  | 'node'
  | 'cursor'



  

export interface StateEdgeFieldDetails {
  node: {
    type: 'State'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"StateEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.State> | prisma.State
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateState

type AggregateStateObject =
  | AggregateStateFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateStateFields =
  | 'count'



  

export interface AggregateStateFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'posts', args?: UserPostsArgs[] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'email'
  | 'name'
  | 'posts'


type UserPostsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  posts: {
    type: 'Post'
    args: Record<UserPostsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: PostWhereInput | null, orderBy?: prisma.PostOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post[]> | prisma.Post[]
  }
}
  

// Types for Post

type PostObject =
  | PostFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'published', args?: [] | false, alias?: string  } 
  | { name: 'author', args?: [] | false, alias?: string  } 

type PostFields =
  | 'id'
  | 'title'
  | 'published'
  | 'author'



  

export interface PostFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  published: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  author: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Post">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PostConnection

type PostConnectionObject =
  | PostConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PostConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PostConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PostEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PostConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostEdge[]> | prisma.PostEdge[]
  }
  aggregate: {
    type: 'AggregatePost'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePost> | prisma.AggregatePost
  }
}
  

// Types for PostEdge

type PostEdgeObject =
  | PostEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PostEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PostEdgeFieldDetails {
  node: {
    type: 'Post'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post> | prisma.Post
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePost

type AggregatePostObject =
  | AggregatePostFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePostFields =
  | 'count'



  

export interface AggregatePostFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Hero

type HeroObject =
  | HeroFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'friends', args?: HeroFriendsArgs[] | false, alias?: string  } 

type HeroFields =
  | 'id'
  | 'name'
  | 'friends'


type HeroFriendsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface HeroFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  friends: {
    type: 'Friend'
    args: Record<HeroFriendsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Hero">,
      args: { where?: FriendWhereInput | null, orderBy?: prisma.FriendOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Friend[]> | prisma.Friend[]
  }
}
  

// Types for Friend

type FriendObject =
  | FriendFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'partner', args?: [] | false, alias?: string  } 

type FriendFields =
  | 'id'
  | 'name'
  | 'partner'



  

export interface FriendFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  partner: {
    type: 'Hero'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Friend">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Hero | null> | prisma.Hero | null
  }
}
  

// Types for HeroConnection

type HeroConnectionObject =
  | HeroConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type HeroConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface HeroConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"HeroConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'HeroEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"HeroConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HeroEdge[]> | prisma.HeroEdge[]
  }
  aggregate: {
    type: 'AggregateHero'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"HeroConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateHero> | prisma.AggregateHero
  }
}
  

// Types for HeroEdge

type HeroEdgeObject =
  | HeroEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type HeroEdgeFields =
  | 'node'
  | 'cursor'



  

export interface HeroEdgeFieldDetails {
  node: {
    type: 'Hero'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"HeroEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Hero> | prisma.Hero
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateHero

type AggregateHeroObject =
  | AggregateHeroFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateHeroFields =
  | 'count'



  

export interface AggregateHeroFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for FriendConnection

type FriendConnectionObject =
  | FriendConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type FriendConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface FriendConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FriendConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'FriendEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"FriendConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FriendEdge[]> | prisma.FriendEdge[]
  }
  aggregate: {
    type: 'AggregateFriend'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FriendConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateFriend> | prisma.AggregateFriend
  }
}
  

// Types for FriendEdge

type FriendEdgeObject =
  | FriendEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type FriendEdgeFields =
  | 'node'
  | 'cursor'



  

export interface FriendEdgeFieldDetails {
  node: {
    type: 'Friend'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FriendEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Friend> | prisma.Friend
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateFriend

type AggregateFriendObject =
  | AggregateFriendFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateFriendFields =
  | 'count'



  

export interface AggregateFriendFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Client

type ClientObject =
  | ClientFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'clientId', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'dba', args?: [] | false, alias?: string  } 
  | { name: 'address', args?: [] | false, alias?: string  } 
  | { name: 'city', args?: [] | false, alias?: string  } 
  | { name: 'stateRef', args?: [] | false, alias?: string  } 
  | { name: 'zipCode', args?: [] | false, alias?: string  } 
  | { name: 'active', args?: [] | false, alias?: string  } 
  | { name: 'positions', args?: ClientPositionsArgs[] | false, alias?: string  } 

type ClientFields =
  | 'id'
  | 'clientId'
  | 'name'
  | 'dba'
  | 'address'
  | 'city'
  | 'stateRef'
  | 'zipCode'
  | 'active'
  | 'positions'


type ClientPositionsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface ClientFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  clientId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  dba: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  address: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  city: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  stateRef: {
    type: 'State'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Client">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.State> | prisma.State
  }
  zipCode: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  active: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  positions: {
    type: 'Position'
    args: Record<ClientPositionsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Client">,
      args: { where?: PositionWhereInput | null, orderBy?: prisma.PositionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Position[]> | prisma.Position[]
  }
}
  

// Types for Position

type PositionObject =
  | PositionFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'code', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'clientRef', args?: PositionClientRefArgs[] | false, alias?: string  } 

type PositionFields =
  | 'id'
  | 'code'
  | 'name'
  | 'clientRef'


type PositionClientRefArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface PositionFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  code: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  clientRef: {
    type: 'Client'
    args: Record<PositionClientRefArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Position">,
      args: { where?: ClientWhereInput | null, orderBy?: prisma.ClientOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Client[]> | prisma.Client[]
  }
}
  

// Types for ClientConnection

type ClientConnectionObject =
  | ClientConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ClientConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ClientConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ClientConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ClientEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ClientConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ClientEdge[]> | prisma.ClientEdge[]
  }
  aggregate: {
    type: 'AggregateClient'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ClientConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateClient> | prisma.AggregateClient
  }
}
  

// Types for ClientEdge

type ClientEdgeObject =
  | ClientEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ClientEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ClientEdgeFieldDetails {
  node: {
    type: 'Client'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ClientEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Client> | prisma.Client
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateClient

type AggregateClientObject =
  | AggregateClientFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateClientFields =
  | 'count'



  

export interface AggregateClientFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PositionConnection

type PositionConnectionObject =
  | PositionConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PositionConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PositionConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PositionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PositionEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PositionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PositionEdge[]> | prisma.PositionEdge[]
  }
  aggregate: {
    type: 'AggregatePosition'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PositionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePosition> | prisma.AggregatePosition
  }
}
  

// Types for PositionEdge

type PositionEdgeObject =
  | PositionEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PositionEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PositionEdgeFieldDetails {
  node: {
    type: 'Position'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PositionEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Position> | prisma.Position
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePosition

type AggregatePositionObject =
  | AggregatePositionFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePositionFields =
  | 'count'



  

export interface AggregatePositionFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createState', args?: MutationCreateStateArgs[] | false, alias?: string  } 
  | { name: 'updateState', args?: MutationUpdateStateArgs[] | false, alias?: string  } 
  | { name: 'updateManyStates', args?: MutationUpdateManyStatesArgs[] | false, alias?: string  } 
  | { name: 'upsertState', args?: MutationUpsertStateArgs[] | false, alias?: string  } 
  | { name: 'deleteState', args?: MutationDeleteStateArgs[] | false, alias?: string  } 
  | { name: 'deleteManyStates', args?: MutationDeleteManyStatesArgs[] | false, alias?: string  } 
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createPost', args?: MutationCreatePostArgs[] | false, alias?: string  } 
  | { name: 'updatePost', args?: MutationUpdatePostArgs[] | false, alias?: string  } 
  | { name: 'updateManyPosts', args?: MutationUpdateManyPostsArgs[] | false, alias?: string  } 
  | { name: 'upsertPost', args?: MutationUpsertPostArgs[] | false, alias?: string  } 
  | { name: 'deletePost', args?: MutationDeletePostArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPosts', args?: MutationDeleteManyPostsArgs[] | false, alias?: string  } 
  | { name: 'createHero', args?: MutationCreateHeroArgs[] | false, alias?: string  } 
  | { name: 'updateHero', args?: MutationUpdateHeroArgs[] | false, alias?: string  } 
  | { name: 'updateManyHeroes', args?: MutationUpdateManyHeroesArgs[] | false, alias?: string  } 
  | { name: 'upsertHero', args?: MutationUpsertHeroArgs[] | false, alias?: string  } 
  | { name: 'deleteHero', args?: MutationDeleteHeroArgs[] | false, alias?: string  } 
  | { name: 'deleteManyHeroes', args?: MutationDeleteManyHeroesArgs[] | false, alias?: string  } 
  | { name: 'createFriend', args?: MutationCreateFriendArgs[] | false, alias?: string  } 
  | { name: 'updateFriend', args?: MutationUpdateFriendArgs[] | false, alias?: string  } 
  | { name: 'updateManyFriends', args?: MutationUpdateManyFriendsArgs[] | false, alias?: string  } 
  | { name: 'upsertFriend', args?: MutationUpsertFriendArgs[] | false, alias?: string  } 
  | { name: 'deleteFriend', args?: MutationDeleteFriendArgs[] | false, alias?: string  } 
  | { name: 'deleteManyFriends', args?: MutationDeleteManyFriendsArgs[] | false, alias?: string  } 
  | { name: 'createClient', args?: MutationCreateClientArgs[] | false, alias?: string  } 
  | { name: 'updateClient', args?: MutationUpdateClientArgs[] | false, alias?: string  } 
  | { name: 'updateManyClients', args?: MutationUpdateManyClientsArgs[] | false, alias?: string  } 
  | { name: 'upsertClient', args?: MutationUpsertClientArgs[] | false, alias?: string  } 
  | { name: 'deleteClient', args?: MutationDeleteClientArgs[] | false, alias?: string  } 
  | { name: 'deleteManyClients', args?: MutationDeleteManyClientsArgs[] | false, alias?: string  } 
  | { name: 'createPosition', args?: MutationCreatePositionArgs[] | false, alias?: string  } 
  | { name: 'updatePosition', args?: MutationUpdatePositionArgs[] | false, alias?: string  } 
  | { name: 'updateManyPositions', args?: MutationUpdateManyPositionsArgs[] | false, alias?: string  } 
  | { name: 'upsertPosition', args?: MutationUpsertPositionArgs[] | false, alias?: string  } 
  | { name: 'deletePosition', args?: MutationDeletePositionArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPositions', args?: MutationDeleteManyPositionsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createState'
  | 'updateState'
  | 'updateManyStates'
  | 'upsertState'
  | 'deleteState'
  | 'deleteManyStates'
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createPost'
  | 'updatePost'
  | 'updateManyPosts'
  | 'upsertPost'
  | 'deletePost'
  | 'deleteManyPosts'
  | 'createHero'
  | 'updateHero'
  | 'updateManyHeroes'
  | 'upsertHero'
  | 'deleteHero'
  | 'deleteManyHeroes'
  | 'createFriend'
  | 'updateFriend'
  | 'updateManyFriends'
  | 'upsertFriend'
  | 'deleteFriend'
  | 'deleteManyFriends'
  | 'createClient'
  | 'updateClient'
  | 'updateManyClients'
  | 'upsertClient'
  | 'deleteClient'
  | 'deleteManyClients'
  | 'createPosition'
  | 'updatePosition'
  | 'updateManyPositions'
  | 'upsertPosition'
  | 'deletePosition'
  | 'deleteManyPositions'


type MutationCreateStateArgs =
  | 'data'
type MutationUpdateStateArgs =
  | 'data'
  | 'where'
type MutationUpdateManyStatesArgs =
  | 'data'
  | 'where'
type MutationUpsertStateArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteStateArgs =
  | 'where'
type MutationDeleteManyStatesArgs =
  | 'where'
type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreatePostArgs =
  | 'data'
type MutationUpdatePostArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPostsArgs =
  | 'data'
  | 'where'
type MutationUpsertPostArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePostArgs =
  | 'where'
type MutationDeleteManyPostsArgs =
  | 'where'
type MutationCreateHeroArgs =
  | 'data'
type MutationUpdateHeroArgs =
  | 'data'
  | 'where'
type MutationUpdateManyHeroesArgs =
  | 'data'
  | 'where'
type MutationUpsertHeroArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteHeroArgs =
  | 'where'
type MutationDeleteManyHeroesArgs =
  | 'where'
type MutationCreateFriendArgs =
  | 'data'
type MutationUpdateFriendArgs =
  | 'data'
  | 'where'
type MutationUpdateManyFriendsArgs =
  | 'data'
  | 'where'
type MutationUpsertFriendArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteFriendArgs =
  | 'where'
type MutationDeleteManyFriendsArgs =
  | 'where'
type MutationCreateClientArgs =
  | 'data'
type MutationUpdateClientArgs =
  | 'data'
  | 'where'
type MutationUpdateManyClientsArgs =
  | 'data'
  | 'where'
type MutationUpsertClientArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteClientArgs =
  | 'where'
type MutationDeleteManyClientsArgs =
  | 'where'
type MutationCreatePositionArgs =
  | 'data'
type MutationUpdatePositionArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPositionsArgs =
  | 'data'
  | 'where'
type MutationUpsertPositionArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePositionArgs =
  | 'where'
type MutationDeleteManyPositionsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createState: {
    type: 'State'
    args: Record<MutationCreateStateArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: StateCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.State> | prisma.State
  }
  updateState: {
    type: 'State'
    args: Record<MutationUpdateStateArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: StateUpdateInput, where: StateWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.State | null> | prisma.State | null
  }
  updateManyStates: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyStatesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: StateUpdateManyMutationInput, where?: StateWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertState: {
    type: 'State'
    args: Record<MutationUpsertStateArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: StateWhereUniqueInput, create: StateCreateInput, update: StateUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.State> | prisma.State
  }
  deleteState: {
    type: 'State'
    args: Record<MutationDeleteStateArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: StateWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.State | null> | prisma.State | null
  }
  deleteManyStates: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyStatesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: StateWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createPost: {
    type: 'Post'
    args: Record<MutationCreatePostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post> | prisma.Post
  }
  updatePost: {
    type: 'Post'
    args: Record<MutationUpdatePostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostUpdateInput, where: PostWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post | null> | prisma.Post | null
  }
  updateManyPosts: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPostsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostUpdateManyMutationInput, where?: PostWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPost: {
    type: 'Post'
    args: Record<MutationUpsertPostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PostWhereUniqueInput, create: PostCreateInput, update: PostUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post> | prisma.Post
  }
  deletePost: {
    type: 'Post'
    args: Record<MutationDeletePostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PostWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post | null> | prisma.Post | null
  }
  deleteManyPosts: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPostsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PostWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createHero: {
    type: 'Hero'
    args: Record<MutationCreateHeroArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: HeroCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Hero> | prisma.Hero
  }
  updateHero: {
    type: 'Hero'
    args: Record<MutationUpdateHeroArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: HeroUpdateInput, where: HeroWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Hero | null> | prisma.Hero | null
  }
  updateManyHeroes: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyHeroesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: HeroUpdateManyMutationInput, where?: HeroWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertHero: {
    type: 'Hero'
    args: Record<MutationUpsertHeroArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: HeroWhereUniqueInput, create: HeroCreateInput, update: HeroUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Hero> | prisma.Hero
  }
  deleteHero: {
    type: 'Hero'
    args: Record<MutationDeleteHeroArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: HeroWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Hero | null> | prisma.Hero | null
  }
  deleteManyHeroes: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyHeroesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: HeroWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createFriend: {
    type: 'Friend'
    args: Record<MutationCreateFriendArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FriendCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Friend> | prisma.Friend
  }
  updateFriend: {
    type: 'Friend'
    args: Record<MutationUpdateFriendArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FriendUpdateInput, where: FriendWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Friend | null> | prisma.Friend | null
  }
  updateManyFriends: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyFriendsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FriendUpdateManyMutationInput, where?: FriendWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertFriend: {
    type: 'Friend'
    args: Record<MutationUpsertFriendArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FriendWhereUniqueInput, create: FriendCreateInput, update: FriendUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Friend> | prisma.Friend
  }
  deleteFriend: {
    type: 'Friend'
    args: Record<MutationDeleteFriendArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FriendWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Friend | null> | prisma.Friend | null
  }
  deleteManyFriends: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyFriendsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: FriendWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createClient: {
    type: 'Client'
    args: Record<MutationCreateClientArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ClientCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Client> | prisma.Client
  }
  updateClient: {
    type: 'Client'
    args: Record<MutationUpdateClientArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ClientUpdateInput, where: ClientWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Client | null> | prisma.Client | null
  }
  updateManyClients: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyClientsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ClientUpdateManyMutationInput, where?: ClientWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertClient: {
    type: 'Client'
    args: Record<MutationUpsertClientArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ClientWhereUniqueInput, create: ClientCreateInput, update: ClientUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Client> | prisma.Client
  }
  deleteClient: {
    type: 'Client'
    args: Record<MutationDeleteClientArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ClientWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Client | null> | prisma.Client | null
  }
  deleteManyClients: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyClientsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ClientWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createPosition: {
    type: 'Position'
    args: Record<MutationCreatePositionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PositionCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Position> | prisma.Position
  }
  updatePosition: {
    type: 'Position'
    args: Record<MutationUpdatePositionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PositionUpdateInput, where: PositionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Position | null> | prisma.Position | null
  }
  updateManyPositions: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPositionsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PositionUpdateManyMutationInput, where?: PositionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPosition: {
    type: 'Position'
    args: Record<MutationUpsertPositionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PositionWhereUniqueInput, create: PositionCreateInput, update: PositionUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Position> | prisma.Position
  }
  deletePosition: {
    type: 'Position'
    args: Record<MutationDeletePositionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PositionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Position | null> | prisma.Position | null
  }
  deleteManyPositions: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPositionsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PositionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'state', args?: SubscriptionStateArgs[] | false, alias?: string  } 
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'post', args?: SubscriptionPostArgs[] | false, alias?: string  } 
  | { name: 'hero', args?: SubscriptionHeroArgs[] | false, alias?: string  } 
  | { name: 'friend', args?: SubscriptionFriendArgs[] | false, alias?: string  } 
  | { name: 'client', args?: SubscriptionClientArgs[] | false, alias?: string  } 
  | { name: 'position', args?: SubscriptionPositionArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'state'
  | 'user'
  | 'post'
  | 'hero'
  | 'friend'
  | 'client'
  | 'position'


type SubscriptionStateArgs =
  | 'where'
type SubscriptionUserArgs =
  | 'where'
type SubscriptionPostArgs =
  | 'where'
type SubscriptionHeroArgs =
  | 'where'
type SubscriptionFriendArgs =
  | 'where'
type SubscriptionClientArgs =
  | 'where'
type SubscriptionPositionArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  state: {
    type: 'StateSubscriptionPayload'
    args: Record<SubscriptionStateArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: StateSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.StateSubscriptionPayload | null> | prisma.StateSubscriptionPayload | null
  }
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  post: {
    type: 'PostSubscriptionPayload'
    args: Record<SubscriptionPostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PostSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostSubscriptionPayload | null> | prisma.PostSubscriptionPayload | null
  }
  hero: {
    type: 'HeroSubscriptionPayload'
    args: Record<SubscriptionHeroArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: HeroSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HeroSubscriptionPayload | null> | prisma.HeroSubscriptionPayload | null
  }
  friend: {
    type: 'FriendSubscriptionPayload'
    args: Record<SubscriptionFriendArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: FriendSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FriendSubscriptionPayload | null> | prisma.FriendSubscriptionPayload | null
  }
  client: {
    type: 'ClientSubscriptionPayload'
    args: Record<SubscriptionClientArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ClientSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ClientSubscriptionPayload | null> | prisma.ClientSubscriptionPayload | null
  }
  position: {
    type: 'PositionSubscriptionPayload'
    args: Record<SubscriptionPositionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PositionSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PositionSubscriptionPayload | null> | prisma.PositionSubscriptionPayload | null
  }
}
  

// Types for StateSubscriptionPayload

type StateSubscriptionPayloadObject =
  | StateSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type StateSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface StateSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"StateSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'State'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"StateSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.State | null> | prisma.State | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'StatePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"StateSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.StatePreviousValues | null> | prisma.StatePreviousValues | null
  }
}
  

// Types for StatePreviousValues

type StatePreviousValuesObject =
  | StatePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'abbreviation', args?: [] | false, alias?: string  } 

type StatePreviousValuesFields =
  | 'id'
  | 'name'
  | 'abbreviation'



  

export interface StatePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  abbreviation: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'email'
  | 'name'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PostSubscriptionPayload

type PostSubscriptionPayloadObject =
  | PostSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PostSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PostSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Post'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PostSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post | null> | prisma.Post | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PostPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PostSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostPreviousValues | null> | prisma.PostPreviousValues | null
  }
}
  

// Types for PostPreviousValues

type PostPreviousValuesObject =
  | PostPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'published', args?: [] | false, alias?: string  } 

type PostPreviousValuesFields =
  | 'id'
  | 'title'
  | 'published'



  

export interface PostPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  published: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for HeroSubscriptionPayload

type HeroSubscriptionPayloadObject =
  | HeroSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type HeroSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface HeroSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"HeroSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Hero'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"HeroSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Hero | null> | prisma.Hero | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'HeroPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"HeroSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HeroPreviousValues | null> | prisma.HeroPreviousValues | null
  }
}
  

// Types for HeroPreviousValues

type HeroPreviousValuesObject =
  | HeroPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type HeroPreviousValuesFields =
  | 'id'
  | 'name'



  

export interface HeroPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for FriendSubscriptionPayload

type FriendSubscriptionPayloadObject =
  | FriendSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type FriendSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface FriendSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FriendSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Friend'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FriendSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Friend | null> | prisma.Friend | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'FriendPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FriendSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FriendPreviousValues | null> | prisma.FriendPreviousValues | null
  }
}
  

// Types for FriendPreviousValues

type FriendPreviousValuesObject =
  | FriendPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type FriendPreviousValuesFields =
  | 'id'
  | 'name'



  

export interface FriendPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ClientSubscriptionPayload

type ClientSubscriptionPayloadObject =
  | ClientSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ClientSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ClientSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ClientSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Client'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ClientSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Client | null> | prisma.Client | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ClientPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ClientSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ClientPreviousValues | null> | prisma.ClientPreviousValues | null
  }
}
  

// Types for ClientPreviousValues

type ClientPreviousValuesObject =
  | ClientPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'clientId', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'dba', args?: [] | false, alias?: string  } 
  | { name: 'address', args?: [] | false, alias?: string  } 
  | { name: 'city', args?: [] | false, alias?: string  } 
  | { name: 'zipCode', args?: [] | false, alias?: string  } 
  | { name: 'active', args?: [] | false, alias?: string  } 

type ClientPreviousValuesFields =
  | 'id'
  | 'clientId'
  | 'name'
  | 'dba'
  | 'address'
  | 'city'
  | 'zipCode'
  | 'active'



  

export interface ClientPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  clientId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  dba: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  address: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  city: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  zipCode: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  active: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PositionSubscriptionPayload

type PositionSubscriptionPayloadObject =
  | PositionSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PositionSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PositionSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PositionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Position'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PositionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Position | null> | prisma.Position | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PositionPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PositionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PositionPreviousValues | null> | prisma.PositionPreviousValues | null
  }
}
  

// Types for PositionPreviousValues

type PositionPreviousValuesObject =
  | PositionPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'code', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type PositionPreviousValuesFields =
  | 'id'
  | 'code'
  | 'name'



  

export interface PositionPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  code: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface StateWhereUniqueInput {
  id?: string | null
}
export type StateWhereUniqueInputInputObject =
  | Extract<keyof StateWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface StateWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  abbreviation?: string | null
  abbreviation_not?: string | null
  abbreviation_in?: string[]
  abbreviation_not_in?: string[]
  abbreviation_lt?: string | null
  abbreviation_lte?: string | null
  abbreviation_gt?: string | null
  abbreviation_gte?: string | null
  abbreviation_contains?: string | null
  abbreviation_not_contains?: string | null
  abbreviation_starts_with?: string | null
  abbreviation_not_starts_with?: string | null
  abbreviation_ends_with?: string | null
  abbreviation_not_ends_with?: string | null
  AND?: StateWhereInput[]
  OR?: StateWhereInput[]
  NOT?: StateWhereInput[]
}
export type StateWhereInputInputObject =
  | Extract<keyof StateWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'abbreviation', alias?: string  } 
  | { name: 'abbreviation_not', alias?: string  } 
  | { name: 'abbreviation_in', alias?: string  } 
  | { name: 'abbreviation_not_in', alias?: string  } 
  | { name: 'abbreviation_lt', alias?: string  } 
  | { name: 'abbreviation_lte', alias?: string  } 
  | { name: 'abbreviation_gt', alias?: string  } 
  | { name: 'abbreviation_gte', alias?: string  } 
  | { name: 'abbreviation_contains', alias?: string  } 
  | { name: 'abbreviation_not_contains', alias?: string  } 
  | { name: 'abbreviation_starts_with', alias?: string  } 
  | { name: 'abbreviation_not_starts_with', alias?: string  } 
  | { name: 'abbreviation_ends_with', alias?: string  } 
  | { name: 'abbreviation_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereUniqueInput {
  id?: string | null
  email?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface PostWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  published?: boolean | null
  published_not?: boolean | null
  author?: UserWhereInput | null
  AND?: PostWhereInput[]
  OR?: PostWhereInput[]
  NOT?: PostWhereInput[]
}
export type PostWhereInputInputObject =
  | Extract<keyof PostWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'published', alias?: string  } 
  | { name: 'published_not', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  posts_every?: PostWhereInput | null
  posts_some?: PostWhereInput | null
  posts_none?: PostWhereInput | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'posts_every', alias?: string  } 
  | { name: 'posts_some', alias?: string  } 
  | { name: 'posts_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PostWhereUniqueInput {
  id?: string | null
}
export type PostWhereUniqueInputInputObject =
  | Extract<keyof PostWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface HeroWhereUniqueInput {
  id?: string | null
}
export type HeroWhereUniqueInputInputObject =
  | Extract<keyof HeroWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface FriendWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  partner?: HeroWhereInput | null
  AND?: FriendWhereInput[]
  OR?: FriendWhereInput[]
  NOT?: FriendWhereInput[]
}
export type FriendWhereInputInputObject =
  | Extract<keyof FriendWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'partner', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface HeroWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  friends_every?: FriendWhereInput | null
  friends_some?: FriendWhereInput | null
  friends_none?: FriendWhereInput | null
  AND?: HeroWhereInput[]
  OR?: HeroWhereInput[]
  NOT?: HeroWhereInput[]
}
export type HeroWhereInputInputObject =
  | Extract<keyof HeroWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'friends_every', alias?: string  } 
  | { name: 'friends_some', alias?: string  } 
  | { name: 'friends_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FriendWhereUniqueInput {
  id?: string | null
}
export type FriendWhereUniqueInputInputObject =
  | Extract<keyof FriendWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ClientWhereUniqueInput {
  id?: string | null
  clientId?: string | null
}
export type ClientWhereUniqueInputInputObject =
  | Extract<keyof ClientWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'clientId', alias?: string  } 
  
export interface PositionWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  code?: string | null
  code_not?: string | null
  code_in?: string[]
  code_not_in?: string[]
  code_lt?: string | null
  code_lte?: string | null
  code_gt?: string | null
  code_gte?: string | null
  code_contains?: string | null
  code_not_contains?: string | null
  code_starts_with?: string | null
  code_not_starts_with?: string | null
  code_ends_with?: string | null
  code_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  clientRef_every?: ClientWhereInput | null
  clientRef_some?: ClientWhereInput | null
  clientRef_none?: ClientWhereInput | null
  AND?: PositionWhereInput[]
  OR?: PositionWhereInput[]
  NOT?: PositionWhereInput[]
}
export type PositionWhereInputInputObject =
  | Extract<keyof PositionWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'code_not', alias?: string  } 
  | { name: 'code_in', alias?: string  } 
  | { name: 'code_not_in', alias?: string  } 
  | { name: 'code_lt', alias?: string  } 
  | { name: 'code_lte', alias?: string  } 
  | { name: 'code_gt', alias?: string  } 
  | { name: 'code_gte', alias?: string  } 
  | { name: 'code_contains', alias?: string  } 
  | { name: 'code_not_contains', alias?: string  } 
  | { name: 'code_starts_with', alias?: string  } 
  | { name: 'code_not_starts_with', alias?: string  } 
  | { name: 'code_ends_with', alias?: string  } 
  | { name: 'code_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'clientRef_every', alias?: string  } 
  | { name: 'clientRef_some', alias?: string  } 
  | { name: 'clientRef_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ClientWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  clientId?: string | null
  clientId_not?: string | null
  clientId_in?: string[]
  clientId_not_in?: string[]
  clientId_lt?: string | null
  clientId_lte?: string | null
  clientId_gt?: string | null
  clientId_gte?: string | null
  clientId_contains?: string | null
  clientId_not_contains?: string | null
  clientId_starts_with?: string | null
  clientId_not_starts_with?: string | null
  clientId_ends_with?: string | null
  clientId_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  dba?: string | null
  dba_not?: string | null
  dba_in?: string[]
  dba_not_in?: string[]
  dba_lt?: string | null
  dba_lte?: string | null
  dba_gt?: string | null
  dba_gte?: string | null
  dba_contains?: string | null
  dba_not_contains?: string | null
  dba_starts_with?: string | null
  dba_not_starts_with?: string | null
  dba_ends_with?: string | null
  dba_not_ends_with?: string | null
  address?: string | null
  address_not?: string | null
  address_in?: string[]
  address_not_in?: string[]
  address_lt?: string | null
  address_lte?: string | null
  address_gt?: string | null
  address_gte?: string | null
  address_contains?: string | null
  address_not_contains?: string | null
  address_starts_with?: string | null
  address_not_starts_with?: string | null
  address_ends_with?: string | null
  address_not_ends_with?: string | null
  city?: string | null
  city_not?: string | null
  city_in?: string[]
  city_not_in?: string[]
  city_lt?: string | null
  city_lte?: string | null
  city_gt?: string | null
  city_gte?: string | null
  city_contains?: string | null
  city_not_contains?: string | null
  city_starts_with?: string | null
  city_not_starts_with?: string | null
  city_ends_with?: string | null
  city_not_ends_with?: string | null
  stateRef?: StateWhereInput | null
  zipCode?: string | null
  zipCode_not?: string | null
  zipCode_in?: string[]
  zipCode_not_in?: string[]
  zipCode_lt?: string | null
  zipCode_lte?: string | null
  zipCode_gt?: string | null
  zipCode_gte?: string | null
  zipCode_contains?: string | null
  zipCode_not_contains?: string | null
  zipCode_starts_with?: string | null
  zipCode_not_starts_with?: string | null
  zipCode_ends_with?: string | null
  zipCode_not_ends_with?: string | null
  active?: boolean | null
  active_not?: boolean | null
  positions_every?: PositionWhereInput | null
  positions_some?: PositionWhereInput | null
  positions_none?: PositionWhereInput | null
  AND?: ClientWhereInput[]
  OR?: ClientWhereInput[]
  NOT?: ClientWhereInput[]
}
export type ClientWhereInputInputObject =
  | Extract<keyof ClientWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'clientId', alias?: string  } 
  | { name: 'clientId_not', alias?: string  } 
  | { name: 'clientId_in', alias?: string  } 
  | { name: 'clientId_not_in', alias?: string  } 
  | { name: 'clientId_lt', alias?: string  } 
  | { name: 'clientId_lte', alias?: string  } 
  | { name: 'clientId_gt', alias?: string  } 
  | { name: 'clientId_gte', alias?: string  } 
  | { name: 'clientId_contains', alias?: string  } 
  | { name: 'clientId_not_contains', alias?: string  } 
  | { name: 'clientId_starts_with', alias?: string  } 
  | { name: 'clientId_not_starts_with', alias?: string  } 
  | { name: 'clientId_ends_with', alias?: string  } 
  | { name: 'clientId_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'dba', alias?: string  } 
  | { name: 'dba_not', alias?: string  } 
  | { name: 'dba_in', alias?: string  } 
  | { name: 'dba_not_in', alias?: string  } 
  | { name: 'dba_lt', alias?: string  } 
  | { name: 'dba_lte', alias?: string  } 
  | { name: 'dba_gt', alias?: string  } 
  | { name: 'dba_gte', alias?: string  } 
  | { name: 'dba_contains', alias?: string  } 
  | { name: 'dba_not_contains', alias?: string  } 
  | { name: 'dba_starts_with', alias?: string  } 
  | { name: 'dba_not_starts_with', alias?: string  } 
  | { name: 'dba_ends_with', alias?: string  } 
  | { name: 'dba_not_ends_with', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'address_not', alias?: string  } 
  | { name: 'address_in', alias?: string  } 
  | { name: 'address_not_in', alias?: string  } 
  | { name: 'address_lt', alias?: string  } 
  | { name: 'address_lte', alias?: string  } 
  | { name: 'address_gt', alias?: string  } 
  | { name: 'address_gte', alias?: string  } 
  | { name: 'address_contains', alias?: string  } 
  | { name: 'address_not_contains', alias?: string  } 
  | { name: 'address_starts_with', alias?: string  } 
  | { name: 'address_not_starts_with', alias?: string  } 
  | { name: 'address_ends_with', alias?: string  } 
  | { name: 'address_not_ends_with', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'city_not', alias?: string  } 
  | { name: 'city_in', alias?: string  } 
  | { name: 'city_not_in', alias?: string  } 
  | { name: 'city_lt', alias?: string  } 
  | { name: 'city_lte', alias?: string  } 
  | { name: 'city_gt', alias?: string  } 
  | { name: 'city_gte', alias?: string  } 
  | { name: 'city_contains', alias?: string  } 
  | { name: 'city_not_contains', alias?: string  } 
  | { name: 'city_starts_with', alias?: string  } 
  | { name: 'city_not_starts_with', alias?: string  } 
  | { name: 'city_ends_with', alias?: string  } 
  | { name: 'city_not_ends_with', alias?: string  } 
  | { name: 'stateRef', alias?: string  } 
  | { name: 'zipCode', alias?: string  } 
  | { name: 'zipCode_not', alias?: string  } 
  | { name: 'zipCode_in', alias?: string  } 
  | { name: 'zipCode_not_in', alias?: string  } 
  | { name: 'zipCode_lt', alias?: string  } 
  | { name: 'zipCode_lte', alias?: string  } 
  | { name: 'zipCode_gt', alias?: string  } 
  | { name: 'zipCode_gte', alias?: string  } 
  | { name: 'zipCode_contains', alias?: string  } 
  | { name: 'zipCode_not_contains', alias?: string  } 
  | { name: 'zipCode_starts_with', alias?: string  } 
  | { name: 'zipCode_not_starts_with', alias?: string  } 
  | { name: 'zipCode_ends_with', alias?: string  } 
  | { name: 'zipCode_not_ends_with', alias?: string  } 
  | { name: 'active', alias?: string  } 
  | { name: 'active_not', alias?: string  } 
  | { name: 'positions_every', alias?: string  } 
  | { name: 'positions_some', alias?: string  } 
  | { name: 'positions_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PositionWhereUniqueInput {
  id?: string | null
  code?: string | null
}
export type PositionWhereUniqueInputInputObject =
  | Extract<keyof PositionWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'code', alias?: string  } 
  
export interface StateCreateInput {
  id?: string | null
  name?: string
  abbreviation?: string
}
export type StateCreateInputInputObject =
  | Extract<keyof StateCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'abbreviation', alias?: string  } 
  
export interface StateUpdateInput {
  name?: string | null
  abbreviation?: string | null
}
export type StateUpdateInputInputObject =
  | Extract<keyof StateUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'abbreviation', alias?: string  } 
  
export interface StateUpdateManyMutationInput {
  name?: string | null
  abbreviation?: string | null
}
export type StateUpdateManyMutationInputInputObject =
  | Extract<keyof StateUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'abbreviation', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  email?: string | null
  name?: string
  posts?: PostCreateManyWithoutAuthorInput | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  
export interface PostCreateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[]
  connect?: PostWhereUniqueInput[]
}
export type PostCreateManyWithoutAuthorInputInputObject =
  | Extract<keyof PostCreateManyWithoutAuthorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PostCreateWithoutAuthorInput {
  id?: string | null
  title?: string
  published?: boolean | null
}
export type PostCreateWithoutAuthorInputInputObject =
  | Extract<keyof PostCreateWithoutAuthorInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'published', alias?: string  } 
  
export interface UserUpdateInput {
  email?: string | null
  name?: string | null
  posts?: PostUpdateManyWithoutAuthorInput | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  
export interface PostUpdateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[]
  delete?: PostWhereUniqueInput[]
  connect?: PostWhereUniqueInput[]
  set?: PostWhereUniqueInput[]
  disconnect?: PostWhereUniqueInput[]
  update?: PostUpdateWithWhereUniqueWithoutAuthorInput[]
  upsert?: PostUpsertWithWhereUniqueWithoutAuthorInput[]
  deleteMany?: PostScalarWhereInput[]
  updateMany?: PostUpdateManyWithWhereNestedInput[]
}
export type PostUpdateManyWithoutAuthorInputInputObject =
  | Extract<keyof PostUpdateManyWithoutAuthorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface PostUpdateWithWhereUniqueWithoutAuthorInput {
  where?: PostWhereUniqueInput
  data?: PostUpdateWithoutAuthorDataInput
}
export type PostUpdateWithWhereUniqueWithoutAuthorInputInputObject =
  | Extract<keyof PostUpdateWithWhereUniqueWithoutAuthorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PostUpdateWithoutAuthorDataInput {
  title?: string | null
  published?: boolean | null
}
export type PostUpdateWithoutAuthorDataInputInputObject =
  | Extract<keyof PostUpdateWithoutAuthorDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'published', alias?: string  } 
  
export interface PostUpsertWithWhereUniqueWithoutAuthorInput {
  where?: PostWhereUniqueInput
  update?: PostUpdateWithoutAuthorDataInput
  create?: PostCreateWithoutAuthorInput
}
export type PostUpsertWithWhereUniqueWithoutAuthorInputInputObject =
  | Extract<keyof PostUpsertWithWhereUniqueWithoutAuthorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PostScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  published?: boolean | null
  published_not?: boolean | null
  AND?: PostScalarWhereInput[]
  OR?: PostScalarWhereInput[]
  NOT?: PostScalarWhereInput[]
}
export type PostScalarWhereInputInputObject =
  | Extract<keyof PostScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'published', alias?: string  } 
  | { name: 'published_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PostUpdateManyWithWhereNestedInput {
  where?: PostScalarWhereInput
  data?: PostUpdateManyDataInput
}
export type PostUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof PostUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PostUpdateManyDataInput {
  title?: string | null
  published?: boolean | null
}
export type PostUpdateManyDataInputInputObject =
  | Extract<keyof PostUpdateManyDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'published', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  email?: string | null
  name?: string | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface PostCreateInput {
  id?: string | null
  title?: string
  published?: boolean | null
  author?: UserCreateOneWithoutPostsInput | null
}
export type PostCreateInputInputObject =
  | Extract<keyof PostCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'published', alias?: string  } 
  | { name: 'author', alias?: string  } 
  
export interface UserCreateOneWithoutPostsInput {
  create?: UserCreateWithoutPostsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutPostsInputInputObject =
  | Extract<keyof UserCreateOneWithoutPostsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutPostsInput {
  id?: string | null
  email?: string | null
  name?: string
}
export type UserCreateWithoutPostsInputInputObject =
  | Extract<keyof UserCreateWithoutPostsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface PostUpdateInput {
  title?: string | null
  published?: boolean | null
  author?: UserUpdateOneWithoutPostsInput | null
}
export type PostUpdateInputInputObject =
  | Extract<keyof PostUpdateInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'published', alias?: string  } 
  | { name: 'author', alias?: string  } 
  
export interface UserUpdateOneWithoutPostsInput {
  create?: UserCreateWithoutPostsInput | null
  update?: UserUpdateWithoutPostsDataInput | null
  upsert?: UserUpsertWithoutPostsInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneWithoutPostsInputInputObject =
  | Extract<keyof UserUpdateOneWithoutPostsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutPostsDataInput {
  email?: string | null
  name?: string | null
}
export type UserUpdateWithoutPostsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutPostsDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface UserUpsertWithoutPostsInput {
  update?: UserUpdateWithoutPostsDataInput
  create?: UserCreateWithoutPostsInput
}
export type UserUpsertWithoutPostsInputInputObject =
  | Extract<keyof UserUpsertWithoutPostsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PostUpdateManyMutationInput {
  title?: string | null
  published?: boolean | null
}
export type PostUpdateManyMutationInputInputObject =
  | Extract<keyof PostUpdateManyMutationInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'published', alias?: string  } 
  
export interface HeroCreateInput {
  id?: string | null
  name?: string
  friends?: FriendCreateManyWithoutPartnerInput | null
}
export type HeroCreateInputInputObject =
  | Extract<keyof HeroCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'friends', alias?: string  } 
  
export interface FriendCreateManyWithoutPartnerInput {
  create?: FriendCreateWithoutPartnerInput[]
  connect?: FriendWhereUniqueInput[]
}
export type FriendCreateManyWithoutPartnerInputInputObject =
  | Extract<keyof FriendCreateManyWithoutPartnerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface FriendCreateWithoutPartnerInput {
  id?: string | null
  name?: string
}
export type FriendCreateWithoutPartnerInputInputObject =
  | Extract<keyof FriendCreateWithoutPartnerInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface HeroUpdateInput {
  name?: string | null
  friends?: FriendUpdateManyWithoutPartnerInput | null
}
export type HeroUpdateInputInputObject =
  | Extract<keyof HeroUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'friends', alias?: string  } 
  
export interface FriendUpdateManyWithoutPartnerInput {
  create?: FriendCreateWithoutPartnerInput[]
  delete?: FriendWhereUniqueInput[]
  connect?: FriendWhereUniqueInput[]
  set?: FriendWhereUniqueInput[]
  disconnect?: FriendWhereUniqueInput[]
  update?: FriendUpdateWithWhereUniqueWithoutPartnerInput[]
  upsert?: FriendUpsertWithWhereUniqueWithoutPartnerInput[]
  deleteMany?: FriendScalarWhereInput[]
  updateMany?: FriendUpdateManyWithWhereNestedInput[]
}
export type FriendUpdateManyWithoutPartnerInputInputObject =
  | Extract<keyof FriendUpdateManyWithoutPartnerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface FriendUpdateWithWhereUniqueWithoutPartnerInput {
  where?: FriendWhereUniqueInput
  data?: FriendUpdateWithoutPartnerDataInput
}
export type FriendUpdateWithWhereUniqueWithoutPartnerInputInputObject =
  | Extract<keyof FriendUpdateWithWhereUniqueWithoutPartnerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface FriendUpdateWithoutPartnerDataInput {
  name?: string | null
}
export type FriendUpdateWithoutPartnerDataInputInputObject =
  | Extract<keyof FriendUpdateWithoutPartnerDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface FriendUpsertWithWhereUniqueWithoutPartnerInput {
  where?: FriendWhereUniqueInput
  update?: FriendUpdateWithoutPartnerDataInput
  create?: FriendCreateWithoutPartnerInput
}
export type FriendUpsertWithWhereUniqueWithoutPartnerInputInputObject =
  | Extract<keyof FriendUpsertWithWhereUniqueWithoutPartnerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface FriendScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  AND?: FriendScalarWhereInput[]
  OR?: FriendScalarWhereInput[]
  NOT?: FriendScalarWhereInput[]
}
export type FriendScalarWhereInputInputObject =
  | Extract<keyof FriendScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FriendUpdateManyWithWhereNestedInput {
  where?: FriendScalarWhereInput
  data?: FriendUpdateManyDataInput
}
export type FriendUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof FriendUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface FriendUpdateManyDataInput {
  name?: string | null
}
export type FriendUpdateManyDataInputInputObject =
  | Extract<keyof FriendUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface HeroUpdateManyMutationInput {
  name?: string | null
}
export type HeroUpdateManyMutationInputInputObject =
  | Extract<keyof HeroUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface FriendCreateInput {
  id?: string | null
  name?: string
  partner?: HeroCreateOneWithoutFriendsInput | null
}
export type FriendCreateInputInputObject =
  | Extract<keyof FriendCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'partner', alias?: string  } 
  
export interface HeroCreateOneWithoutFriendsInput {
  create?: HeroCreateWithoutFriendsInput | null
  connect?: HeroWhereUniqueInput | null
}
export type HeroCreateOneWithoutFriendsInputInputObject =
  | Extract<keyof HeroCreateOneWithoutFriendsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface HeroCreateWithoutFriendsInput {
  id?: string | null
  name?: string
}
export type HeroCreateWithoutFriendsInputInputObject =
  | Extract<keyof HeroCreateWithoutFriendsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface FriendUpdateInput {
  name?: string | null
  partner?: HeroUpdateOneWithoutFriendsInput | null
}
export type FriendUpdateInputInputObject =
  | Extract<keyof FriendUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'partner', alias?: string  } 
  
export interface HeroUpdateOneWithoutFriendsInput {
  create?: HeroCreateWithoutFriendsInput | null
  update?: HeroUpdateWithoutFriendsDataInput | null
  upsert?: HeroUpsertWithoutFriendsInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: HeroWhereUniqueInput | null
}
export type HeroUpdateOneWithoutFriendsInputInputObject =
  | Extract<keyof HeroUpdateOneWithoutFriendsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface HeroUpdateWithoutFriendsDataInput {
  name?: string | null
}
export type HeroUpdateWithoutFriendsDataInputInputObject =
  | Extract<keyof HeroUpdateWithoutFriendsDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface HeroUpsertWithoutFriendsInput {
  update?: HeroUpdateWithoutFriendsDataInput
  create?: HeroCreateWithoutFriendsInput
}
export type HeroUpsertWithoutFriendsInputInputObject =
  | Extract<keyof HeroUpsertWithoutFriendsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface FriendUpdateManyMutationInput {
  name?: string | null
}
export type FriendUpdateManyMutationInputInputObject =
  | Extract<keyof FriendUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface ClientCreateInput {
  id?: string | null
  clientId?: string
  name?: string
  dba?: string | null
  address?: string
  city?: string
  stateRef?: StateCreateOneInput
  zipCode?: string
  active?: boolean | null
  positions?: PositionCreateManyWithoutClientRefInput | null
}
export type ClientCreateInputInputObject =
  | Extract<keyof ClientCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'clientId', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'dba', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'stateRef', alias?: string  } 
  | { name: 'zipCode', alias?: string  } 
  | { name: 'active', alias?: string  } 
  | { name: 'positions', alias?: string  } 
  
export interface StateCreateOneInput {
  create?: StateCreateInput | null
  connect?: StateWhereUniqueInput | null
}
export type StateCreateOneInputInputObject =
  | Extract<keyof StateCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PositionCreateManyWithoutClientRefInput {
  create?: PositionCreateWithoutClientRefInput[]
  connect?: PositionWhereUniqueInput[]
}
export type PositionCreateManyWithoutClientRefInputInputObject =
  | Extract<keyof PositionCreateManyWithoutClientRefInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PositionCreateWithoutClientRefInput {
  id?: string | null
  code?: string
  name?: string
}
export type PositionCreateWithoutClientRefInputInputObject =
  | Extract<keyof PositionCreateWithoutClientRefInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface ClientUpdateInput {
  clientId?: string | null
  name?: string | null
  dba?: string | null
  address?: string | null
  city?: string | null
  stateRef?: StateUpdateOneRequiredInput | null
  zipCode?: string | null
  active?: boolean | null
  positions?: PositionUpdateManyWithoutClientRefInput | null
}
export type ClientUpdateInputInputObject =
  | Extract<keyof ClientUpdateInput, string>
  | { name: 'clientId', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'dba', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'stateRef', alias?: string  } 
  | { name: 'zipCode', alias?: string  } 
  | { name: 'active', alias?: string  } 
  | { name: 'positions', alias?: string  } 
  
export interface StateUpdateOneRequiredInput {
  create?: StateCreateInput | null
  update?: StateUpdateDataInput | null
  upsert?: StateUpsertNestedInput | null
  connect?: StateWhereUniqueInput | null
}
export type StateUpdateOneRequiredInputInputObject =
  | Extract<keyof StateUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface StateUpdateDataInput {
  name?: string | null
  abbreviation?: string | null
}
export type StateUpdateDataInputInputObject =
  | Extract<keyof StateUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'abbreviation', alias?: string  } 
  
export interface StateUpsertNestedInput {
  update?: StateUpdateDataInput
  create?: StateCreateInput
}
export type StateUpsertNestedInputInputObject =
  | Extract<keyof StateUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PositionUpdateManyWithoutClientRefInput {
  create?: PositionCreateWithoutClientRefInput[]
  delete?: PositionWhereUniqueInput[]
  connect?: PositionWhereUniqueInput[]
  set?: PositionWhereUniqueInput[]
  disconnect?: PositionWhereUniqueInput[]
  update?: PositionUpdateWithWhereUniqueWithoutClientRefInput[]
  upsert?: PositionUpsertWithWhereUniqueWithoutClientRefInput[]
  deleteMany?: PositionScalarWhereInput[]
  updateMany?: PositionUpdateManyWithWhereNestedInput[]
}
export type PositionUpdateManyWithoutClientRefInputInputObject =
  | Extract<keyof PositionUpdateManyWithoutClientRefInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface PositionUpdateWithWhereUniqueWithoutClientRefInput {
  where?: PositionWhereUniqueInput
  data?: PositionUpdateWithoutClientRefDataInput
}
export type PositionUpdateWithWhereUniqueWithoutClientRefInputInputObject =
  | Extract<keyof PositionUpdateWithWhereUniqueWithoutClientRefInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PositionUpdateWithoutClientRefDataInput {
  code?: string | null
  name?: string | null
}
export type PositionUpdateWithoutClientRefDataInputInputObject =
  | Extract<keyof PositionUpdateWithoutClientRefDataInput, string>
  | { name: 'code', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface PositionUpsertWithWhereUniqueWithoutClientRefInput {
  where?: PositionWhereUniqueInput
  update?: PositionUpdateWithoutClientRefDataInput
  create?: PositionCreateWithoutClientRefInput
}
export type PositionUpsertWithWhereUniqueWithoutClientRefInputInputObject =
  | Extract<keyof PositionUpsertWithWhereUniqueWithoutClientRefInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PositionScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  code?: string | null
  code_not?: string | null
  code_in?: string[]
  code_not_in?: string[]
  code_lt?: string | null
  code_lte?: string | null
  code_gt?: string | null
  code_gte?: string | null
  code_contains?: string | null
  code_not_contains?: string | null
  code_starts_with?: string | null
  code_not_starts_with?: string | null
  code_ends_with?: string | null
  code_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  AND?: PositionScalarWhereInput[]
  OR?: PositionScalarWhereInput[]
  NOT?: PositionScalarWhereInput[]
}
export type PositionScalarWhereInputInputObject =
  | Extract<keyof PositionScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'code_not', alias?: string  } 
  | { name: 'code_in', alias?: string  } 
  | { name: 'code_not_in', alias?: string  } 
  | { name: 'code_lt', alias?: string  } 
  | { name: 'code_lte', alias?: string  } 
  | { name: 'code_gt', alias?: string  } 
  | { name: 'code_gte', alias?: string  } 
  | { name: 'code_contains', alias?: string  } 
  | { name: 'code_not_contains', alias?: string  } 
  | { name: 'code_starts_with', alias?: string  } 
  | { name: 'code_not_starts_with', alias?: string  } 
  | { name: 'code_ends_with', alias?: string  } 
  | { name: 'code_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PositionUpdateManyWithWhereNestedInput {
  where?: PositionScalarWhereInput
  data?: PositionUpdateManyDataInput
}
export type PositionUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof PositionUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PositionUpdateManyDataInput {
  code?: string | null
  name?: string | null
}
export type PositionUpdateManyDataInputInputObject =
  | Extract<keyof PositionUpdateManyDataInput, string>
  | { name: 'code', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface ClientUpdateManyMutationInput {
  clientId?: string | null
  name?: string | null
  dba?: string | null
  address?: string | null
  city?: string | null
  zipCode?: string | null
  active?: boolean | null
}
export type ClientUpdateManyMutationInputInputObject =
  | Extract<keyof ClientUpdateManyMutationInput, string>
  | { name: 'clientId', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'dba', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'zipCode', alias?: string  } 
  | { name: 'active', alias?: string  } 
  
export interface PositionCreateInput {
  id?: string | null
  code?: string
  name?: string
  clientRef?: ClientCreateManyWithoutPositionsInput | null
}
export type PositionCreateInputInputObject =
  | Extract<keyof PositionCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'clientRef', alias?: string  } 
  
export interface ClientCreateManyWithoutPositionsInput {
  create?: ClientCreateWithoutPositionsInput[]
  connect?: ClientWhereUniqueInput[]
}
export type ClientCreateManyWithoutPositionsInputInputObject =
  | Extract<keyof ClientCreateManyWithoutPositionsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ClientCreateWithoutPositionsInput {
  id?: string | null
  clientId?: string
  name?: string
  dba?: string | null
  address?: string
  city?: string
  stateRef?: StateCreateOneInput
  zipCode?: string
  active?: boolean | null
}
export type ClientCreateWithoutPositionsInputInputObject =
  | Extract<keyof ClientCreateWithoutPositionsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'clientId', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'dba', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'stateRef', alias?: string  } 
  | { name: 'zipCode', alias?: string  } 
  | { name: 'active', alias?: string  } 
  
export interface PositionUpdateInput {
  code?: string | null
  name?: string | null
  clientRef?: ClientUpdateManyWithoutPositionsInput | null
}
export type PositionUpdateInputInputObject =
  | Extract<keyof PositionUpdateInput, string>
  | { name: 'code', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'clientRef', alias?: string  } 
  
export interface ClientUpdateManyWithoutPositionsInput {
  create?: ClientCreateWithoutPositionsInput[]
  delete?: ClientWhereUniqueInput[]
  connect?: ClientWhereUniqueInput[]
  set?: ClientWhereUniqueInput[]
  disconnect?: ClientWhereUniqueInput[]
  update?: ClientUpdateWithWhereUniqueWithoutPositionsInput[]
  upsert?: ClientUpsertWithWhereUniqueWithoutPositionsInput[]
  deleteMany?: ClientScalarWhereInput[]
  updateMany?: ClientUpdateManyWithWhereNestedInput[]
}
export type ClientUpdateManyWithoutPositionsInputInputObject =
  | Extract<keyof ClientUpdateManyWithoutPositionsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ClientUpdateWithWhereUniqueWithoutPositionsInput {
  where?: ClientWhereUniqueInput
  data?: ClientUpdateWithoutPositionsDataInput
}
export type ClientUpdateWithWhereUniqueWithoutPositionsInputInputObject =
  | Extract<keyof ClientUpdateWithWhereUniqueWithoutPositionsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ClientUpdateWithoutPositionsDataInput {
  clientId?: string | null
  name?: string | null
  dba?: string | null
  address?: string | null
  city?: string | null
  stateRef?: StateUpdateOneRequiredInput | null
  zipCode?: string | null
  active?: boolean | null
}
export type ClientUpdateWithoutPositionsDataInputInputObject =
  | Extract<keyof ClientUpdateWithoutPositionsDataInput, string>
  | { name: 'clientId', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'dba', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'stateRef', alias?: string  } 
  | { name: 'zipCode', alias?: string  } 
  | { name: 'active', alias?: string  } 
  
export interface ClientUpsertWithWhereUniqueWithoutPositionsInput {
  where?: ClientWhereUniqueInput
  update?: ClientUpdateWithoutPositionsDataInput
  create?: ClientCreateWithoutPositionsInput
}
export type ClientUpsertWithWhereUniqueWithoutPositionsInputInputObject =
  | Extract<keyof ClientUpsertWithWhereUniqueWithoutPositionsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ClientScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  clientId?: string | null
  clientId_not?: string | null
  clientId_in?: string[]
  clientId_not_in?: string[]
  clientId_lt?: string | null
  clientId_lte?: string | null
  clientId_gt?: string | null
  clientId_gte?: string | null
  clientId_contains?: string | null
  clientId_not_contains?: string | null
  clientId_starts_with?: string | null
  clientId_not_starts_with?: string | null
  clientId_ends_with?: string | null
  clientId_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  dba?: string | null
  dba_not?: string | null
  dba_in?: string[]
  dba_not_in?: string[]
  dba_lt?: string | null
  dba_lte?: string | null
  dba_gt?: string | null
  dba_gte?: string | null
  dba_contains?: string | null
  dba_not_contains?: string | null
  dba_starts_with?: string | null
  dba_not_starts_with?: string | null
  dba_ends_with?: string | null
  dba_not_ends_with?: string | null
  address?: string | null
  address_not?: string | null
  address_in?: string[]
  address_not_in?: string[]
  address_lt?: string | null
  address_lte?: string | null
  address_gt?: string | null
  address_gte?: string | null
  address_contains?: string | null
  address_not_contains?: string | null
  address_starts_with?: string | null
  address_not_starts_with?: string | null
  address_ends_with?: string | null
  address_not_ends_with?: string | null
  city?: string | null
  city_not?: string | null
  city_in?: string[]
  city_not_in?: string[]
  city_lt?: string | null
  city_lte?: string | null
  city_gt?: string | null
  city_gte?: string | null
  city_contains?: string | null
  city_not_contains?: string | null
  city_starts_with?: string | null
  city_not_starts_with?: string | null
  city_ends_with?: string | null
  city_not_ends_with?: string | null
  zipCode?: string | null
  zipCode_not?: string | null
  zipCode_in?: string[]
  zipCode_not_in?: string[]
  zipCode_lt?: string | null
  zipCode_lte?: string | null
  zipCode_gt?: string | null
  zipCode_gte?: string | null
  zipCode_contains?: string | null
  zipCode_not_contains?: string | null
  zipCode_starts_with?: string | null
  zipCode_not_starts_with?: string | null
  zipCode_ends_with?: string | null
  zipCode_not_ends_with?: string | null
  active?: boolean | null
  active_not?: boolean | null
  AND?: ClientScalarWhereInput[]
  OR?: ClientScalarWhereInput[]
  NOT?: ClientScalarWhereInput[]
}
export type ClientScalarWhereInputInputObject =
  | Extract<keyof ClientScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'clientId', alias?: string  } 
  | { name: 'clientId_not', alias?: string  } 
  | { name: 'clientId_in', alias?: string  } 
  | { name: 'clientId_not_in', alias?: string  } 
  | { name: 'clientId_lt', alias?: string  } 
  | { name: 'clientId_lte', alias?: string  } 
  | { name: 'clientId_gt', alias?: string  } 
  | { name: 'clientId_gte', alias?: string  } 
  | { name: 'clientId_contains', alias?: string  } 
  | { name: 'clientId_not_contains', alias?: string  } 
  | { name: 'clientId_starts_with', alias?: string  } 
  | { name: 'clientId_not_starts_with', alias?: string  } 
  | { name: 'clientId_ends_with', alias?: string  } 
  | { name: 'clientId_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'dba', alias?: string  } 
  | { name: 'dba_not', alias?: string  } 
  | { name: 'dba_in', alias?: string  } 
  | { name: 'dba_not_in', alias?: string  } 
  | { name: 'dba_lt', alias?: string  } 
  | { name: 'dba_lte', alias?: string  } 
  | { name: 'dba_gt', alias?: string  } 
  | { name: 'dba_gte', alias?: string  } 
  | { name: 'dba_contains', alias?: string  } 
  | { name: 'dba_not_contains', alias?: string  } 
  | { name: 'dba_starts_with', alias?: string  } 
  | { name: 'dba_not_starts_with', alias?: string  } 
  | { name: 'dba_ends_with', alias?: string  } 
  | { name: 'dba_not_ends_with', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'address_not', alias?: string  } 
  | { name: 'address_in', alias?: string  } 
  | { name: 'address_not_in', alias?: string  } 
  | { name: 'address_lt', alias?: string  } 
  | { name: 'address_lte', alias?: string  } 
  | { name: 'address_gt', alias?: string  } 
  | { name: 'address_gte', alias?: string  } 
  | { name: 'address_contains', alias?: string  } 
  | { name: 'address_not_contains', alias?: string  } 
  | { name: 'address_starts_with', alias?: string  } 
  | { name: 'address_not_starts_with', alias?: string  } 
  | { name: 'address_ends_with', alias?: string  } 
  | { name: 'address_not_ends_with', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'city_not', alias?: string  } 
  | { name: 'city_in', alias?: string  } 
  | { name: 'city_not_in', alias?: string  } 
  | { name: 'city_lt', alias?: string  } 
  | { name: 'city_lte', alias?: string  } 
  | { name: 'city_gt', alias?: string  } 
  | { name: 'city_gte', alias?: string  } 
  | { name: 'city_contains', alias?: string  } 
  | { name: 'city_not_contains', alias?: string  } 
  | { name: 'city_starts_with', alias?: string  } 
  | { name: 'city_not_starts_with', alias?: string  } 
  | { name: 'city_ends_with', alias?: string  } 
  | { name: 'city_not_ends_with', alias?: string  } 
  | { name: 'zipCode', alias?: string  } 
  | { name: 'zipCode_not', alias?: string  } 
  | { name: 'zipCode_in', alias?: string  } 
  | { name: 'zipCode_not_in', alias?: string  } 
  | { name: 'zipCode_lt', alias?: string  } 
  | { name: 'zipCode_lte', alias?: string  } 
  | { name: 'zipCode_gt', alias?: string  } 
  | { name: 'zipCode_gte', alias?: string  } 
  | { name: 'zipCode_contains', alias?: string  } 
  | { name: 'zipCode_not_contains', alias?: string  } 
  | { name: 'zipCode_starts_with', alias?: string  } 
  | { name: 'zipCode_not_starts_with', alias?: string  } 
  | { name: 'zipCode_ends_with', alias?: string  } 
  | { name: 'zipCode_not_ends_with', alias?: string  } 
  | { name: 'active', alias?: string  } 
  | { name: 'active_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ClientUpdateManyWithWhereNestedInput {
  where?: ClientScalarWhereInput
  data?: ClientUpdateManyDataInput
}
export type ClientUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ClientUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ClientUpdateManyDataInput {
  clientId?: string | null
  name?: string | null
  dba?: string | null
  address?: string | null
  city?: string | null
  zipCode?: string | null
  active?: boolean | null
}
export type ClientUpdateManyDataInputInputObject =
  | Extract<keyof ClientUpdateManyDataInput, string>
  | { name: 'clientId', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'dba', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'zipCode', alias?: string  } 
  | { name: 'active', alias?: string  } 
  
export interface PositionUpdateManyMutationInput {
  code?: string | null
  name?: string | null
}
export type PositionUpdateManyMutationInputInputObject =
  | Extract<keyof PositionUpdateManyMutationInput, string>
  | { name: 'code', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface StateSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: StateWhereInput | null
  AND?: StateSubscriptionWhereInput[]
  OR?: StateSubscriptionWhereInput[]
  NOT?: StateSubscriptionWhereInput[]
}
export type StateSubscriptionWhereInputInputObject =
  | Extract<keyof StateSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PostSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PostWhereInput | null
  AND?: PostSubscriptionWhereInput[]
  OR?: PostSubscriptionWhereInput[]
  NOT?: PostSubscriptionWhereInput[]
}
export type PostSubscriptionWhereInputInputObject =
  | Extract<keyof PostSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface HeroSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: HeroWhereInput | null
  AND?: HeroSubscriptionWhereInput[]
  OR?: HeroSubscriptionWhereInput[]
  NOT?: HeroSubscriptionWhereInput[]
}
export type HeroSubscriptionWhereInputInputObject =
  | Extract<keyof HeroSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FriendSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: FriendWhereInput | null
  AND?: FriendSubscriptionWhereInput[]
  OR?: FriendSubscriptionWhereInput[]
  NOT?: FriendSubscriptionWhereInput[]
}
export type FriendSubscriptionWhereInputInputObject =
  | Extract<keyof FriendSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ClientSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ClientWhereInput | null
  AND?: ClientSubscriptionWhereInput[]
  OR?: ClientSubscriptionWhereInput[]
  NOT?: ClientSubscriptionWhereInput[]
}
export type ClientSubscriptionWhereInputInputObject =
  | Extract<keyof ClientSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PositionSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PositionWhereInput | null
  AND?: PositionSubscriptionWhereInput[]
  OR?: PositionSubscriptionWhereInput[]
  NOT?: PositionSubscriptionWhereInput[]
}
export type PositionSubscriptionWhereInputInputObject =
  | Extract<keyof PositionSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type StateOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'abbreviation_ASC'
  | 'abbreviation_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type PostOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'published_ASC'
  | 'published_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type FriendOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type HeroOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type PositionOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'code_ASC'
  | 'code_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ClientOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'clientId_ASC'
  | 'clientId_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'dba_ASC'
  | 'dba_DESC'
  | 'address_ASC'
  | 'address_DESC'
  | 'city_ASC'
  | 'city_DESC'
  | 'zipCode_ASC'
  | 'zipCode_DESC'
  | 'active_ASC'
  | 'active_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  