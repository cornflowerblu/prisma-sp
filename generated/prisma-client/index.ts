// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  client: (where?: ClientWhereInput) => Promise<boolean>;
  friend: (where?: FriendWhereInput) => Promise<boolean>;
  hero: (where?: HeroWhereInput) => Promise<boolean>;
  position: (where?: PositionWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  state: (where?: StateWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  client: (where: ClientWhereUniqueInput) => ClientNullablePromise;
  clients: (args?: {
    where?: ClientWhereInput;
    orderBy?: ClientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Client>;
  clientsConnection: (args?: {
    where?: ClientWhereInput;
    orderBy?: ClientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ClientConnectionPromise;
  friend: (where: FriendWhereUniqueInput) => FriendNullablePromise;
  friends: (args?: {
    where?: FriendWhereInput;
    orderBy?: FriendOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Friend>;
  friendsConnection: (args?: {
    where?: FriendWhereInput;
    orderBy?: FriendOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FriendConnectionPromise;
  hero: (where: HeroWhereUniqueInput) => HeroNullablePromise;
  heroes: (args?: {
    where?: HeroWhereInput;
    orderBy?: HeroOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Hero>;
  heroesConnection: (args?: {
    where?: HeroWhereInput;
    orderBy?: HeroOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => HeroConnectionPromise;
  position: (where: PositionWhereUniqueInput) => PositionNullablePromise;
  positions: (args?: {
    where?: PositionWhereInput;
    orderBy?: PositionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Position>;
  positionsConnection: (args?: {
    where?: PositionWhereInput;
    orderBy?: PositionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PositionConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostNullablePromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  state: (where: StateWhereUniqueInput) => StateNullablePromise;
  states: (args?: {
    where?: StateWhereInput;
    orderBy?: StateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<State>;
  statesConnection: (args?: {
    where?: StateWhereInput;
    orderBy?: StateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => StateConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createClient: (data: ClientCreateInput) => ClientPromise;
  updateClient: (args: {
    data: ClientUpdateInput;
    where: ClientWhereUniqueInput;
  }) => ClientPromise;
  updateManyClients: (args: {
    data: ClientUpdateManyMutationInput;
    where?: ClientWhereInput;
  }) => BatchPayloadPromise;
  upsertClient: (args: {
    where: ClientWhereUniqueInput;
    create: ClientCreateInput;
    update: ClientUpdateInput;
  }) => ClientPromise;
  deleteClient: (where: ClientWhereUniqueInput) => ClientPromise;
  deleteManyClients: (where?: ClientWhereInput) => BatchPayloadPromise;
  createFriend: (data: FriendCreateInput) => FriendPromise;
  updateFriend: (args: {
    data: FriendUpdateInput;
    where: FriendWhereUniqueInput;
  }) => FriendPromise;
  updateManyFriends: (args: {
    data: FriendUpdateManyMutationInput;
    where?: FriendWhereInput;
  }) => BatchPayloadPromise;
  upsertFriend: (args: {
    where: FriendWhereUniqueInput;
    create: FriendCreateInput;
    update: FriendUpdateInput;
  }) => FriendPromise;
  deleteFriend: (where: FriendWhereUniqueInput) => FriendPromise;
  deleteManyFriends: (where?: FriendWhereInput) => BatchPayloadPromise;
  createHero: (data: HeroCreateInput) => HeroPromise;
  updateHero: (args: {
    data: HeroUpdateInput;
    where: HeroWhereUniqueInput;
  }) => HeroPromise;
  updateManyHeroes: (args: {
    data: HeroUpdateManyMutationInput;
    where?: HeroWhereInput;
  }) => BatchPayloadPromise;
  upsertHero: (args: {
    where: HeroWhereUniqueInput;
    create: HeroCreateInput;
    update: HeroUpdateInput;
  }) => HeroPromise;
  deleteHero: (where: HeroWhereUniqueInput) => HeroPromise;
  deleteManyHeroes: (where?: HeroWhereInput) => BatchPayloadPromise;
  createPosition: (data: PositionCreateInput) => PositionPromise;
  updatePosition: (args: {
    data: PositionUpdateInput;
    where: PositionWhereUniqueInput;
  }) => PositionPromise;
  updateManyPositions: (args: {
    data: PositionUpdateManyMutationInput;
    where?: PositionWhereInput;
  }) => BatchPayloadPromise;
  upsertPosition: (args: {
    where: PositionWhereUniqueInput;
    create: PositionCreateInput;
    update: PositionUpdateInput;
  }) => PositionPromise;
  deletePosition: (where: PositionWhereUniqueInput) => PositionPromise;
  deleteManyPositions: (where?: PositionWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createState: (data: StateCreateInput) => StatePromise;
  updateState: (args: {
    data: StateUpdateInput;
    where: StateWhereUniqueInput;
  }) => StatePromise;
  updateManyStates: (args: {
    data: StateUpdateManyMutationInput;
    where?: StateWhereInput;
  }) => BatchPayloadPromise;
  upsertState: (args: {
    where: StateWhereUniqueInput;
    create: StateCreateInput;
    update: StateUpdateInput;
  }) => StatePromise;
  deleteState: (where: StateWhereUniqueInput) => StatePromise;
  deleteManyStates: (where?: StateWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  client: (
    where?: ClientSubscriptionWhereInput
  ) => ClientSubscriptionPayloadSubscription;
  friend: (
    where?: FriendSubscriptionWhereInput
  ) => FriendSubscriptionPayloadSubscription;
  hero: (
    where?: HeroSubscriptionWhereInput
  ) => HeroSubscriptionPayloadSubscription;
  position: (
    where?: PositionSubscriptionWhereInput
  ) => PositionSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  state: (
    where?: StateSubscriptionWhereInput
  ) => StateSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PositionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "name_ASC"
  | "name_DESC";

export type ClientOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "clientId_ASC"
  | "clientId_DESC"
  | "name_ASC"
  | "name_DESC"
  | "dba_ASC"
  | "dba_DESC"
  | "address_ASC"
  | "address_DESC"
  | "city_ASC"
  | "city_DESC"
  | "zipCode_ASC"
  | "zipCode_DESC";

export type FriendOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type HeroOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "published_ASC"
  | "published_DESC";

export type StateOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "abbreviation_ASC"
  | "abbreviation_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ClientWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  clientId?: Maybe<String>;
}>;

export interface PositionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<ID_Input>;
  code_not?: Maybe<ID_Input>;
  code_in?: Maybe<ID_Input[] | ID_Input>;
  code_not_in?: Maybe<ID_Input[] | ID_Input>;
  code_lt?: Maybe<ID_Input>;
  code_lte?: Maybe<ID_Input>;
  code_gt?: Maybe<ID_Input>;
  code_gte?: Maybe<ID_Input>;
  code_contains?: Maybe<ID_Input>;
  code_not_contains?: Maybe<ID_Input>;
  code_starts_with?: Maybe<ID_Input>;
  code_not_starts_with?: Maybe<ID_Input>;
  code_ends_with?: Maybe<ID_Input>;
  code_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  clientRef_every?: Maybe<ClientWhereInput>;
  clientRef_some?: Maybe<ClientWhereInput>;
  clientRef_none?: Maybe<ClientWhereInput>;
  AND?: Maybe<PositionWhereInput[] | PositionWhereInput>;
  OR?: Maybe<PositionWhereInput[] | PositionWhereInput>;
  NOT?: Maybe<PositionWhereInput[] | PositionWhereInput>;
}

export interface ClientWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  clientId?: Maybe<String>;
  clientId_not?: Maybe<String>;
  clientId_in?: Maybe<String[] | String>;
  clientId_not_in?: Maybe<String[] | String>;
  clientId_lt?: Maybe<String>;
  clientId_lte?: Maybe<String>;
  clientId_gt?: Maybe<String>;
  clientId_gte?: Maybe<String>;
  clientId_contains?: Maybe<String>;
  clientId_not_contains?: Maybe<String>;
  clientId_starts_with?: Maybe<String>;
  clientId_not_starts_with?: Maybe<String>;
  clientId_ends_with?: Maybe<String>;
  clientId_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  dba?: Maybe<String>;
  dba_not?: Maybe<String>;
  dba_in?: Maybe<String[] | String>;
  dba_not_in?: Maybe<String[] | String>;
  dba_lt?: Maybe<String>;
  dba_lte?: Maybe<String>;
  dba_gt?: Maybe<String>;
  dba_gte?: Maybe<String>;
  dba_contains?: Maybe<String>;
  dba_not_contains?: Maybe<String>;
  dba_starts_with?: Maybe<String>;
  dba_not_starts_with?: Maybe<String>;
  dba_ends_with?: Maybe<String>;
  dba_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  stateRef?: Maybe<StateWhereInput>;
  zipCode?: Maybe<String>;
  zipCode_not?: Maybe<String>;
  zipCode_in?: Maybe<String[] | String>;
  zipCode_not_in?: Maybe<String[] | String>;
  zipCode_lt?: Maybe<String>;
  zipCode_lte?: Maybe<String>;
  zipCode_gt?: Maybe<String>;
  zipCode_gte?: Maybe<String>;
  zipCode_contains?: Maybe<String>;
  zipCode_not_contains?: Maybe<String>;
  zipCode_starts_with?: Maybe<String>;
  zipCode_not_starts_with?: Maybe<String>;
  zipCode_ends_with?: Maybe<String>;
  zipCode_not_ends_with?: Maybe<String>;
  positions_every?: Maybe<PositionWhereInput>;
  positions_some?: Maybe<PositionWhereInput>;
  positions_none?: Maybe<PositionWhereInput>;
  AND?: Maybe<ClientWhereInput[] | ClientWhereInput>;
  OR?: Maybe<ClientWhereInput[] | ClientWhereInput>;
  NOT?: Maybe<ClientWhereInput[] | ClientWhereInput>;
}

export interface StateWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  abbreviation?: Maybe<String>;
  abbreviation_not?: Maybe<String>;
  abbreviation_in?: Maybe<String[] | String>;
  abbreviation_not_in?: Maybe<String[] | String>;
  abbreviation_lt?: Maybe<String>;
  abbreviation_lte?: Maybe<String>;
  abbreviation_gt?: Maybe<String>;
  abbreviation_gte?: Maybe<String>;
  abbreviation_contains?: Maybe<String>;
  abbreviation_not_contains?: Maybe<String>;
  abbreviation_starts_with?: Maybe<String>;
  abbreviation_not_starts_with?: Maybe<String>;
  abbreviation_ends_with?: Maybe<String>;
  abbreviation_not_ends_with?: Maybe<String>;
  AND?: Maybe<StateWhereInput[] | StateWhereInput>;
  OR?: Maybe<StateWhereInput[] | StateWhereInput>;
  NOT?: Maybe<StateWhereInput[] | StateWhereInput>;
}

export type FriendWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface FriendWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  partner?: Maybe<HeroWhereInput>;
  AND?: Maybe<FriendWhereInput[] | FriendWhereInput>;
  OR?: Maybe<FriendWhereInput[] | FriendWhereInput>;
  NOT?: Maybe<FriendWhereInput[] | FriendWhereInput>;
}

export interface HeroWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  friends_every?: Maybe<FriendWhereInput>;
  friends_some?: Maybe<FriendWhereInput>;
  friends_none?: Maybe<FriendWhereInput>;
  AND?: Maybe<HeroWhereInput[] | HeroWhereInput>;
  OR?: Maybe<HeroWhereInput[] | HeroWhereInput>;
  NOT?: Maybe<HeroWhereInput[] | HeroWhereInput>;
}

export type HeroWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type PositionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  code?: Maybe<ID_Input>;
}>;

export type PostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  author?: Maybe<UserWhereInput>;
  AND?: Maybe<PostWhereInput[] | PostWhereInput>;
  OR?: Maybe<PostWhereInput[] | PostWhereInput>;
  NOT?: Maybe<PostWhereInput[] | PostWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  posts_every?: Maybe<PostWhereInput>;
  posts_some?: Maybe<PostWhereInput>;
  posts_none?: Maybe<PostWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type StateWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface ClientCreateInput {
  id?: Maybe<ID_Input>;
  clientId: String;
  name: String;
  dba?: Maybe<String>;
  address: String;
  city: String;
  stateRef: StateCreateOneInput;
  zipCode: String;
  positions?: Maybe<PositionCreateManyWithoutClientRefInput>;
}

export interface StateCreateOneInput {
  create?: Maybe<StateCreateInput>;
  connect?: Maybe<StateWhereUniqueInput>;
}

export interface StateCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  abbreviation: String;
}

export interface PositionCreateManyWithoutClientRefInput {
  create?: Maybe<
    PositionCreateWithoutClientRefInput[] | PositionCreateWithoutClientRefInput
  >;
  connect?: Maybe<PositionWhereUniqueInput[] | PositionWhereUniqueInput>;
}

export interface PositionCreateWithoutClientRefInput {
  id?: Maybe<ID_Input>;
  code: ID_Input;
  name: String;
}

export interface ClientUpdateInput {
  clientId?: Maybe<String>;
  name?: Maybe<String>;
  dba?: Maybe<String>;
  address?: Maybe<String>;
  city?: Maybe<String>;
  stateRef?: Maybe<StateUpdateOneRequiredInput>;
  zipCode?: Maybe<String>;
  positions?: Maybe<PositionUpdateManyWithoutClientRefInput>;
}

export interface StateUpdateOneRequiredInput {
  create?: Maybe<StateCreateInput>;
  update?: Maybe<StateUpdateDataInput>;
  upsert?: Maybe<StateUpsertNestedInput>;
  connect?: Maybe<StateWhereUniqueInput>;
}

export interface StateUpdateDataInput {
  name?: Maybe<String>;
  abbreviation?: Maybe<String>;
}

export interface StateUpsertNestedInput {
  update: StateUpdateDataInput;
  create: StateCreateInput;
}

export interface PositionUpdateManyWithoutClientRefInput {
  create?: Maybe<
    PositionCreateWithoutClientRefInput[] | PositionCreateWithoutClientRefInput
  >;
  delete?: Maybe<PositionWhereUniqueInput[] | PositionWhereUniqueInput>;
  connect?: Maybe<PositionWhereUniqueInput[] | PositionWhereUniqueInput>;
  set?: Maybe<PositionWhereUniqueInput[] | PositionWhereUniqueInput>;
  disconnect?: Maybe<PositionWhereUniqueInput[] | PositionWhereUniqueInput>;
  update?: Maybe<
    | PositionUpdateWithWhereUniqueWithoutClientRefInput[]
    | PositionUpdateWithWhereUniqueWithoutClientRefInput
  >;
  upsert?: Maybe<
    | PositionUpsertWithWhereUniqueWithoutClientRefInput[]
    | PositionUpsertWithWhereUniqueWithoutClientRefInput
  >;
  deleteMany?: Maybe<PositionScalarWhereInput[] | PositionScalarWhereInput>;
  updateMany?: Maybe<
    | PositionUpdateManyWithWhereNestedInput[]
    | PositionUpdateManyWithWhereNestedInput
  >;
}

export interface PositionUpdateWithWhereUniqueWithoutClientRefInput {
  where: PositionWhereUniqueInput;
  data: PositionUpdateWithoutClientRefDataInput;
}

export interface PositionUpdateWithoutClientRefDataInput {
  code?: Maybe<ID_Input>;
  name?: Maybe<String>;
}

export interface PositionUpsertWithWhereUniqueWithoutClientRefInput {
  where: PositionWhereUniqueInput;
  update: PositionUpdateWithoutClientRefDataInput;
  create: PositionCreateWithoutClientRefInput;
}

export interface PositionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<ID_Input>;
  code_not?: Maybe<ID_Input>;
  code_in?: Maybe<ID_Input[] | ID_Input>;
  code_not_in?: Maybe<ID_Input[] | ID_Input>;
  code_lt?: Maybe<ID_Input>;
  code_lte?: Maybe<ID_Input>;
  code_gt?: Maybe<ID_Input>;
  code_gte?: Maybe<ID_Input>;
  code_contains?: Maybe<ID_Input>;
  code_not_contains?: Maybe<ID_Input>;
  code_starts_with?: Maybe<ID_Input>;
  code_not_starts_with?: Maybe<ID_Input>;
  code_ends_with?: Maybe<ID_Input>;
  code_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<PositionScalarWhereInput[] | PositionScalarWhereInput>;
  OR?: Maybe<PositionScalarWhereInput[] | PositionScalarWhereInput>;
  NOT?: Maybe<PositionScalarWhereInput[] | PositionScalarWhereInput>;
}

export interface PositionUpdateManyWithWhereNestedInput {
  where: PositionScalarWhereInput;
  data: PositionUpdateManyDataInput;
}

export interface PositionUpdateManyDataInput {
  code?: Maybe<ID_Input>;
  name?: Maybe<String>;
}

export interface ClientUpdateManyMutationInput {
  clientId?: Maybe<String>;
  name?: Maybe<String>;
  dba?: Maybe<String>;
  address?: Maybe<String>;
  city?: Maybe<String>;
  zipCode?: Maybe<String>;
}

export interface FriendCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  partner?: Maybe<HeroCreateOneWithoutFriendsInput>;
}

export interface HeroCreateOneWithoutFriendsInput {
  create?: Maybe<HeroCreateWithoutFriendsInput>;
  connect?: Maybe<HeroWhereUniqueInput>;
}

export interface HeroCreateWithoutFriendsInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface FriendUpdateInput {
  name?: Maybe<String>;
  partner?: Maybe<HeroUpdateOneWithoutFriendsInput>;
}

export interface HeroUpdateOneWithoutFriendsInput {
  create?: Maybe<HeroCreateWithoutFriendsInput>;
  update?: Maybe<HeroUpdateWithoutFriendsDataInput>;
  upsert?: Maybe<HeroUpsertWithoutFriendsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<HeroWhereUniqueInput>;
}

export interface HeroUpdateWithoutFriendsDataInput {
  name?: Maybe<String>;
}

export interface HeroUpsertWithoutFriendsInput {
  update: HeroUpdateWithoutFriendsDataInput;
  create: HeroCreateWithoutFriendsInput;
}

export interface FriendUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface HeroCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  friends?: Maybe<FriendCreateManyWithoutPartnerInput>;
}

export interface FriendCreateManyWithoutPartnerInput {
  create?: Maybe<
    FriendCreateWithoutPartnerInput[] | FriendCreateWithoutPartnerInput
  >;
  connect?: Maybe<FriendWhereUniqueInput[] | FriendWhereUniqueInput>;
}

export interface FriendCreateWithoutPartnerInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface HeroUpdateInput {
  name?: Maybe<String>;
  friends?: Maybe<FriendUpdateManyWithoutPartnerInput>;
}

export interface FriendUpdateManyWithoutPartnerInput {
  create?: Maybe<
    FriendCreateWithoutPartnerInput[] | FriendCreateWithoutPartnerInput
  >;
  delete?: Maybe<FriendWhereUniqueInput[] | FriendWhereUniqueInput>;
  connect?: Maybe<FriendWhereUniqueInput[] | FriendWhereUniqueInput>;
  set?: Maybe<FriendWhereUniqueInput[] | FriendWhereUniqueInput>;
  disconnect?: Maybe<FriendWhereUniqueInput[] | FriendWhereUniqueInput>;
  update?: Maybe<
    | FriendUpdateWithWhereUniqueWithoutPartnerInput[]
    | FriendUpdateWithWhereUniqueWithoutPartnerInput
  >;
  upsert?: Maybe<
    | FriendUpsertWithWhereUniqueWithoutPartnerInput[]
    | FriendUpsertWithWhereUniqueWithoutPartnerInput
  >;
  deleteMany?: Maybe<FriendScalarWhereInput[] | FriendScalarWhereInput>;
  updateMany?: Maybe<
    | FriendUpdateManyWithWhereNestedInput[]
    | FriendUpdateManyWithWhereNestedInput
  >;
}

export interface FriendUpdateWithWhereUniqueWithoutPartnerInput {
  where: FriendWhereUniqueInput;
  data: FriendUpdateWithoutPartnerDataInput;
}

export interface FriendUpdateWithoutPartnerDataInput {
  name?: Maybe<String>;
}

export interface FriendUpsertWithWhereUniqueWithoutPartnerInput {
  where: FriendWhereUniqueInput;
  update: FriendUpdateWithoutPartnerDataInput;
  create: FriendCreateWithoutPartnerInput;
}

export interface FriendScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<FriendScalarWhereInput[] | FriendScalarWhereInput>;
  OR?: Maybe<FriendScalarWhereInput[] | FriendScalarWhereInput>;
  NOT?: Maybe<FriendScalarWhereInput[] | FriendScalarWhereInput>;
}

export interface FriendUpdateManyWithWhereNestedInput {
  where: FriendScalarWhereInput;
  data: FriendUpdateManyDataInput;
}

export interface FriendUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface HeroUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface PositionCreateInput {
  id?: Maybe<ID_Input>;
  code: ID_Input;
  name: String;
  clientRef?: Maybe<ClientCreateManyWithoutPositionsInput>;
}

export interface ClientCreateManyWithoutPositionsInput {
  create?: Maybe<
    ClientCreateWithoutPositionsInput[] | ClientCreateWithoutPositionsInput
  >;
  connect?: Maybe<ClientWhereUniqueInput[] | ClientWhereUniqueInput>;
}

export interface ClientCreateWithoutPositionsInput {
  id?: Maybe<ID_Input>;
  clientId: String;
  name: String;
  dba?: Maybe<String>;
  address: String;
  city: String;
  stateRef: StateCreateOneInput;
  zipCode: String;
}

export interface PositionUpdateInput {
  code?: Maybe<ID_Input>;
  name?: Maybe<String>;
  clientRef?: Maybe<ClientUpdateManyWithoutPositionsInput>;
}

export interface ClientUpdateManyWithoutPositionsInput {
  create?: Maybe<
    ClientCreateWithoutPositionsInput[] | ClientCreateWithoutPositionsInput
  >;
  delete?: Maybe<ClientWhereUniqueInput[] | ClientWhereUniqueInput>;
  connect?: Maybe<ClientWhereUniqueInput[] | ClientWhereUniqueInput>;
  set?: Maybe<ClientWhereUniqueInput[] | ClientWhereUniqueInput>;
  disconnect?: Maybe<ClientWhereUniqueInput[] | ClientWhereUniqueInput>;
  update?: Maybe<
    | ClientUpdateWithWhereUniqueWithoutPositionsInput[]
    | ClientUpdateWithWhereUniqueWithoutPositionsInput
  >;
  upsert?: Maybe<
    | ClientUpsertWithWhereUniqueWithoutPositionsInput[]
    | ClientUpsertWithWhereUniqueWithoutPositionsInput
  >;
  deleteMany?: Maybe<ClientScalarWhereInput[] | ClientScalarWhereInput>;
  updateMany?: Maybe<
    | ClientUpdateManyWithWhereNestedInput[]
    | ClientUpdateManyWithWhereNestedInput
  >;
}

export interface ClientUpdateWithWhereUniqueWithoutPositionsInput {
  where: ClientWhereUniqueInput;
  data: ClientUpdateWithoutPositionsDataInput;
}

export interface ClientUpdateWithoutPositionsDataInput {
  clientId?: Maybe<String>;
  name?: Maybe<String>;
  dba?: Maybe<String>;
  address?: Maybe<String>;
  city?: Maybe<String>;
  stateRef?: Maybe<StateUpdateOneRequiredInput>;
  zipCode?: Maybe<String>;
}

export interface ClientUpsertWithWhereUniqueWithoutPositionsInput {
  where: ClientWhereUniqueInput;
  update: ClientUpdateWithoutPositionsDataInput;
  create: ClientCreateWithoutPositionsInput;
}

export interface ClientScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  clientId?: Maybe<String>;
  clientId_not?: Maybe<String>;
  clientId_in?: Maybe<String[] | String>;
  clientId_not_in?: Maybe<String[] | String>;
  clientId_lt?: Maybe<String>;
  clientId_lte?: Maybe<String>;
  clientId_gt?: Maybe<String>;
  clientId_gte?: Maybe<String>;
  clientId_contains?: Maybe<String>;
  clientId_not_contains?: Maybe<String>;
  clientId_starts_with?: Maybe<String>;
  clientId_not_starts_with?: Maybe<String>;
  clientId_ends_with?: Maybe<String>;
  clientId_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  dba?: Maybe<String>;
  dba_not?: Maybe<String>;
  dba_in?: Maybe<String[] | String>;
  dba_not_in?: Maybe<String[] | String>;
  dba_lt?: Maybe<String>;
  dba_lte?: Maybe<String>;
  dba_gt?: Maybe<String>;
  dba_gte?: Maybe<String>;
  dba_contains?: Maybe<String>;
  dba_not_contains?: Maybe<String>;
  dba_starts_with?: Maybe<String>;
  dba_not_starts_with?: Maybe<String>;
  dba_ends_with?: Maybe<String>;
  dba_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  zipCode?: Maybe<String>;
  zipCode_not?: Maybe<String>;
  zipCode_in?: Maybe<String[] | String>;
  zipCode_not_in?: Maybe<String[] | String>;
  zipCode_lt?: Maybe<String>;
  zipCode_lte?: Maybe<String>;
  zipCode_gt?: Maybe<String>;
  zipCode_gte?: Maybe<String>;
  zipCode_contains?: Maybe<String>;
  zipCode_not_contains?: Maybe<String>;
  zipCode_starts_with?: Maybe<String>;
  zipCode_not_starts_with?: Maybe<String>;
  zipCode_ends_with?: Maybe<String>;
  zipCode_not_ends_with?: Maybe<String>;
  AND?: Maybe<ClientScalarWhereInput[] | ClientScalarWhereInput>;
  OR?: Maybe<ClientScalarWhereInput[] | ClientScalarWhereInput>;
  NOT?: Maybe<ClientScalarWhereInput[] | ClientScalarWhereInput>;
}

export interface ClientUpdateManyWithWhereNestedInput {
  where: ClientScalarWhereInput;
  data: ClientUpdateManyDataInput;
}

export interface ClientUpdateManyDataInput {
  clientId?: Maybe<String>;
  name?: Maybe<String>;
  dba?: Maybe<String>;
  address?: Maybe<String>;
  city?: Maybe<String>;
  zipCode?: Maybe<String>;
}

export interface PositionUpdateManyMutationInput {
  code?: Maybe<ID_Input>;
  name?: Maybe<String>;
}

export interface PostCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  published?: Maybe<Boolean>;
  author?: Maybe<UserCreateOneWithoutPostsInput>;
}

export interface UserCreateOneWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutPostsInput {
  id?: Maybe<ID_Input>;
  email?: Maybe<String>;
  name: String;
}

export interface PostUpdateInput {
  title?: Maybe<String>;
  published?: Maybe<Boolean>;
  author?: Maybe<UserUpdateOneWithoutPostsInput>;
}

export interface UserUpdateOneWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  update?: Maybe<UserUpdateWithoutPostsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPostsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutPostsDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface PostUpdateManyMutationInput {
  title?: Maybe<String>;
  published?: Maybe<Boolean>;
}

export interface StateUpdateInput {
  name?: Maybe<String>;
  abbreviation?: Maybe<String>;
}

export interface StateUpdateManyMutationInput {
  name?: Maybe<String>;
  abbreviation?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email?: Maybe<String>;
  name: String;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
}

export interface PostCreateManyWithoutAuthorInput {
  create?: Maybe<PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface PostCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  title: String;
  published?: Maybe<Boolean>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
}

export interface PostUpdateManyWithoutAuthorInput {
  create?: Maybe<PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput>;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    | PostUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    | PostUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutAuthorDataInput;
}

export interface PostUpdateWithoutAuthorDataInput {
  title?: Maybe<String>;
  published?: Maybe<Boolean>;
}

export interface PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutAuthorDataInput;
  create: PostCreateWithoutAuthorInput;
}

export interface PostScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  AND?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  OR?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  NOT?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface PostUpdateManyDataInput {
  title?: Maybe<String>;
  published?: Maybe<Boolean>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
}

export interface ClientSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ClientWhereInput>;
  AND?: Maybe<ClientSubscriptionWhereInput[] | ClientSubscriptionWhereInput>;
  OR?: Maybe<ClientSubscriptionWhereInput[] | ClientSubscriptionWhereInput>;
  NOT?: Maybe<ClientSubscriptionWhereInput[] | ClientSubscriptionWhereInput>;
}

export interface FriendSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FriendWhereInput>;
  AND?: Maybe<FriendSubscriptionWhereInput[] | FriendSubscriptionWhereInput>;
  OR?: Maybe<FriendSubscriptionWhereInput[] | FriendSubscriptionWhereInput>;
  NOT?: Maybe<FriendSubscriptionWhereInput[] | FriendSubscriptionWhereInput>;
}

export interface HeroSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<HeroWhereInput>;
  AND?: Maybe<HeroSubscriptionWhereInput[] | HeroSubscriptionWhereInput>;
  OR?: Maybe<HeroSubscriptionWhereInput[] | HeroSubscriptionWhereInput>;
  NOT?: Maybe<HeroSubscriptionWhereInput[] | HeroSubscriptionWhereInput>;
}

export interface PositionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PositionWhereInput>;
  AND?: Maybe<
    PositionSubscriptionWhereInput[] | PositionSubscriptionWhereInput
  >;
  OR?: Maybe<PositionSubscriptionWhereInput[] | PositionSubscriptionWhereInput>;
  NOT?: Maybe<
    PositionSubscriptionWhereInput[] | PositionSubscriptionWhereInput
  >;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostWhereInput>;
  AND?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  OR?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  NOT?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
}

export interface StateSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<StateWhereInput>;
  AND?: Maybe<StateSubscriptionWhereInput[] | StateSubscriptionWhereInput>;
  OR?: Maybe<StateSubscriptionWhereInput[] | StateSubscriptionWhereInput>;
  NOT?: Maybe<StateSubscriptionWhereInput[] | StateSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Client {
  id: ID_Output;
  clientId: String;
  name: String;
  dba?: String;
  address: String;
  city: String;
  zipCode: String;
}

export interface ClientPromise extends Promise<Client>, Fragmentable {
  id: () => Promise<ID_Output>;
  clientId: () => Promise<String>;
  name: () => Promise<String>;
  dba: () => Promise<String>;
  address: () => Promise<String>;
  city: () => Promise<String>;
  stateRef: <T = StatePromise>() => T;
  zipCode: () => Promise<String>;
  positions: <T = FragmentableArray<Position>>(args?: {
    where?: PositionWhereInput;
    orderBy?: PositionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ClientSubscription
  extends Promise<AsyncIterator<Client>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  clientId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  dba: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  stateRef: <T = StateSubscription>() => T;
  zipCode: () => Promise<AsyncIterator<String>>;
  positions: <T = Promise<AsyncIterator<PositionSubscription>>>(args?: {
    where?: PositionWhereInput;
    orderBy?: PositionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ClientNullablePromise
  extends Promise<Client | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  clientId: () => Promise<String>;
  name: () => Promise<String>;
  dba: () => Promise<String>;
  address: () => Promise<String>;
  city: () => Promise<String>;
  stateRef: <T = StatePromise>() => T;
  zipCode: () => Promise<String>;
  positions: <T = FragmentableArray<Position>>(args?: {
    where?: PositionWhereInput;
    orderBy?: PositionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface State {
  id: ID_Output;
  name: String;
  abbreviation: String;
}

export interface StatePromise extends Promise<State>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  abbreviation: () => Promise<String>;
}

export interface StateSubscription
  extends Promise<AsyncIterator<State>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  abbreviation: () => Promise<AsyncIterator<String>>;
}

export interface StateNullablePromise
  extends Promise<State | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  abbreviation: () => Promise<String>;
}

export interface Position {
  id: ID_Output;
  code: ID_Output;
  name: String;
}

export interface PositionPromise extends Promise<Position>, Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<ID_Output>;
  name: () => Promise<String>;
  clientRef: <T = FragmentableArray<Client>>(args?: {
    where?: ClientWhereInput;
    orderBy?: ClientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PositionSubscription
  extends Promise<AsyncIterator<Position>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  clientRef: <T = Promise<AsyncIterator<ClientSubscription>>>(args?: {
    where?: ClientWhereInput;
    orderBy?: ClientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PositionNullablePromise
  extends Promise<Position | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<ID_Output>;
  name: () => Promise<String>;
  clientRef: <T = FragmentableArray<Client>>(args?: {
    where?: ClientWhereInput;
    orderBy?: ClientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ClientConnection {
  pageInfo: PageInfo;
  edges: ClientEdge[];
}

export interface ClientConnectionPromise
  extends Promise<ClientConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ClientEdge>>() => T;
  aggregate: <T = AggregateClientPromise>() => T;
}

export interface ClientConnectionSubscription
  extends Promise<AsyncIterator<ClientConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ClientEdgeSubscription>>>() => T;
  aggregate: <T = AggregateClientSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ClientEdge {
  node: Client;
  cursor: String;
}

export interface ClientEdgePromise extends Promise<ClientEdge>, Fragmentable {
  node: <T = ClientPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ClientEdgeSubscription
  extends Promise<AsyncIterator<ClientEdge>>,
    Fragmentable {
  node: <T = ClientSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateClient {
  count: Int;
}

export interface AggregateClientPromise
  extends Promise<AggregateClient>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateClientSubscription
  extends Promise<AsyncIterator<AggregateClient>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Friend {
  id: ID_Output;
  name: String;
}

export interface FriendPromise extends Promise<Friend>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  partner: <T = HeroPromise>() => T;
}

export interface FriendSubscription
  extends Promise<AsyncIterator<Friend>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  partner: <T = HeroSubscription>() => T;
}

export interface FriendNullablePromise
  extends Promise<Friend | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  partner: <T = HeroPromise>() => T;
}

export interface Hero {
  id: ID_Output;
  name: String;
}

export interface HeroPromise extends Promise<Hero>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  friends: <T = FragmentableArray<Friend>>(args?: {
    where?: FriendWhereInput;
    orderBy?: FriendOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface HeroSubscription
  extends Promise<AsyncIterator<Hero>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  friends: <T = Promise<AsyncIterator<FriendSubscription>>>(args?: {
    where?: FriendWhereInput;
    orderBy?: FriendOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface HeroNullablePromise
  extends Promise<Hero | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  friends: <T = FragmentableArray<Friend>>(args?: {
    where?: FriendWhereInput;
    orderBy?: FriendOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface FriendConnection {
  pageInfo: PageInfo;
  edges: FriendEdge[];
}

export interface FriendConnectionPromise
  extends Promise<FriendConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FriendEdge>>() => T;
  aggregate: <T = AggregateFriendPromise>() => T;
}

export interface FriendConnectionSubscription
  extends Promise<AsyncIterator<FriendConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FriendEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFriendSubscription>() => T;
}

export interface FriendEdge {
  node: Friend;
  cursor: String;
}

export interface FriendEdgePromise extends Promise<FriendEdge>, Fragmentable {
  node: <T = FriendPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FriendEdgeSubscription
  extends Promise<AsyncIterator<FriendEdge>>,
    Fragmentable {
  node: <T = FriendSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFriend {
  count: Int;
}

export interface AggregateFriendPromise
  extends Promise<AggregateFriend>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFriendSubscription
  extends Promise<AsyncIterator<AggregateFriend>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface HeroConnection {
  pageInfo: PageInfo;
  edges: HeroEdge[];
}

export interface HeroConnectionPromise
  extends Promise<HeroConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<HeroEdge>>() => T;
  aggregate: <T = AggregateHeroPromise>() => T;
}

export interface HeroConnectionSubscription
  extends Promise<AsyncIterator<HeroConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<HeroEdgeSubscription>>>() => T;
  aggregate: <T = AggregateHeroSubscription>() => T;
}

export interface HeroEdge {
  node: Hero;
  cursor: String;
}

export interface HeroEdgePromise extends Promise<HeroEdge>, Fragmentable {
  node: <T = HeroPromise>() => T;
  cursor: () => Promise<String>;
}

export interface HeroEdgeSubscription
  extends Promise<AsyncIterator<HeroEdge>>,
    Fragmentable {
  node: <T = HeroSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateHero {
  count: Int;
}

export interface AggregateHeroPromise
  extends Promise<AggregateHero>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateHeroSubscription
  extends Promise<AsyncIterator<AggregateHero>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PositionConnection {
  pageInfo: PageInfo;
  edges: PositionEdge[];
}

export interface PositionConnectionPromise
  extends Promise<PositionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PositionEdge>>() => T;
  aggregate: <T = AggregatePositionPromise>() => T;
}

export interface PositionConnectionSubscription
  extends Promise<AsyncIterator<PositionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PositionEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePositionSubscription>() => T;
}

export interface PositionEdge {
  node: Position;
  cursor: String;
}

export interface PositionEdgePromise
  extends Promise<PositionEdge>,
    Fragmentable {
  node: <T = PositionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PositionEdgeSubscription
  extends Promise<AsyncIterator<PositionEdge>>,
    Fragmentable {
  node: <T = PositionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePosition {
  count: Int;
}

export interface AggregatePositionPromise
  extends Promise<AggregatePosition>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePositionSubscription
  extends Promise<AsyncIterator<AggregatePosition>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Post {
  id: ID_Output;
  title: String;
  published: Boolean;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  published: () => Promise<Boolean>;
  author: <T = UserPromise>() => T;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  author: <T = UserSubscription>() => T;
}

export interface PostNullablePromise
  extends Promise<Post | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  published: () => Promise<Boolean>;
  author: <T = UserPromise>() => T;
}

export interface User {
  id: ID_Output;
  email?: String;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StateConnection {
  pageInfo: PageInfo;
  edges: StateEdge[];
}

export interface StateConnectionPromise
  extends Promise<StateConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StateEdge>>() => T;
  aggregate: <T = AggregateStatePromise>() => T;
}

export interface StateConnectionSubscription
  extends Promise<AsyncIterator<StateConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StateEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStateSubscription>() => T;
}

export interface StateEdge {
  node: State;
  cursor: String;
}

export interface StateEdgePromise extends Promise<StateEdge>, Fragmentable {
  node: <T = StatePromise>() => T;
  cursor: () => Promise<String>;
}

export interface StateEdgeSubscription
  extends Promise<AsyncIterator<StateEdge>>,
    Fragmentable {
  node: <T = StateSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateState {
  count: Int;
}

export interface AggregateStatePromise
  extends Promise<AggregateState>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStateSubscription
  extends Promise<AsyncIterator<AggregateState>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ClientSubscriptionPayload {
  mutation: MutationType;
  node: Client;
  updatedFields: String[];
  previousValues: ClientPreviousValues;
}

export interface ClientSubscriptionPayloadPromise
  extends Promise<ClientSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ClientPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ClientPreviousValuesPromise>() => T;
}

export interface ClientSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ClientSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ClientSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ClientPreviousValuesSubscription>() => T;
}

export interface ClientPreviousValues {
  id: ID_Output;
  clientId: String;
  name: String;
  dba?: String;
  address: String;
  city: String;
  zipCode: String;
}

export interface ClientPreviousValuesPromise
  extends Promise<ClientPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  clientId: () => Promise<String>;
  name: () => Promise<String>;
  dba: () => Promise<String>;
  address: () => Promise<String>;
  city: () => Promise<String>;
  zipCode: () => Promise<String>;
}

export interface ClientPreviousValuesSubscription
  extends Promise<AsyncIterator<ClientPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  clientId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  dba: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  zipCode: () => Promise<AsyncIterator<String>>;
}

export interface FriendSubscriptionPayload {
  mutation: MutationType;
  node: Friend;
  updatedFields: String[];
  previousValues: FriendPreviousValues;
}

export interface FriendSubscriptionPayloadPromise
  extends Promise<FriendSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FriendPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FriendPreviousValuesPromise>() => T;
}

export interface FriendSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FriendSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FriendSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FriendPreviousValuesSubscription>() => T;
}

export interface FriendPreviousValues {
  id: ID_Output;
  name: String;
}

export interface FriendPreviousValuesPromise
  extends Promise<FriendPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface FriendPreviousValuesSubscription
  extends Promise<AsyncIterator<FriendPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface HeroSubscriptionPayload {
  mutation: MutationType;
  node: Hero;
  updatedFields: String[];
  previousValues: HeroPreviousValues;
}

export interface HeroSubscriptionPayloadPromise
  extends Promise<HeroSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = HeroPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = HeroPreviousValuesPromise>() => T;
}

export interface HeroSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<HeroSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = HeroSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = HeroPreviousValuesSubscription>() => T;
}

export interface HeroPreviousValues {
  id: ID_Output;
  name: String;
}

export interface HeroPreviousValuesPromise
  extends Promise<HeroPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface HeroPreviousValuesSubscription
  extends Promise<AsyncIterator<HeroPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface PositionSubscriptionPayload {
  mutation: MutationType;
  node: Position;
  updatedFields: String[];
  previousValues: PositionPreviousValues;
}

export interface PositionSubscriptionPayloadPromise
  extends Promise<PositionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PositionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PositionPreviousValuesPromise>() => T;
}

export interface PositionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PositionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PositionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PositionPreviousValuesSubscription>() => T;
}

export interface PositionPreviousValues {
  id: ID_Output;
  code: ID_Output;
  name: String;
}

export interface PositionPreviousValuesPromise
  extends Promise<PositionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface PositionPreviousValuesSubscription
  extends Promise<AsyncIterator<PositionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  title: String;
  published: Boolean;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  published: () => Promise<Boolean>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
}

export interface StateSubscriptionPayload {
  mutation: MutationType;
  node: State;
  updatedFields: String[];
  previousValues: StatePreviousValues;
}

export interface StateSubscriptionPayloadPromise
  extends Promise<StateSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StatePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StatePreviousValuesPromise>() => T;
}

export interface StateSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StateSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StateSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StatePreviousValuesSubscription>() => T;
}

export interface StatePreviousValues {
  id: ID_Output;
  name: String;
  abbreviation: String;
}

export interface StatePreviousValuesPromise
  extends Promise<StatePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  abbreviation: () => Promise<String>;
}

export interface StatePreviousValuesSubscription
  extends Promise<AsyncIterator<StatePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  abbreviation: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email?: String;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "State",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Hero",
    embedded: false
  },
  {
    name: "Friend",
    embedded: false
  },
  {
    name: "Client",
    embedded: false
  },
  {
    name: "Position",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466/platform/dev`
});
export const prisma = new Prisma();
