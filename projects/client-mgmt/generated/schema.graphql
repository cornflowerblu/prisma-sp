### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Client {
  active: Boolean!
  address: String!
  city: String!
  clientId: String!
  dba: String
  id: ID!
  name: String!
  positions(after: String, before: String, first: Int, last: Int, orderBy: PositionOrderByInput, skip: Int, where: PositionWhereInput): [Position!]
  stateRef: State!
  zipCode: String!
}

enum ClientOrderByInput {
  active_ASC
  active_DESC
  address_ASC
  address_DESC
  city_ASC
  city_DESC
  clientId_ASC
  clientId_DESC
  createdAt_ASC
  createdAt_DESC
  dba_ASC
  dba_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  zipCode_ASC
  zipCode_DESC
}

input ClientWhereInput {
  active: Boolean
  active_not: Boolean
  address: String
  address_contains: String
  address_ends_with: String
  address_gt: String
  address_gte: String
  address_in: [String!]
  address_lt: String
  address_lte: String
  address_not: String
  address_not_contains: String
  address_not_ends_with: String
  address_not_in: [String!]
  address_not_starts_with: String
  address_starts_with: String
  AND: [ClientWhereInput!]
  city: String
  city_contains: String
  city_ends_with: String
  city_gt: String
  city_gte: String
  city_in: [String!]
  city_lt: String
  city_lte: String
  city_not: String
  city_not_contains: String
  city_not_ends_with: String
  city_not_in: [String!]
  city_not_starts_with: String
  city_starts_with: String
  clientId: String
  clientId_contains: String
  clientId_ends_with: String
  clientId_gt: String
  clientId_gte: String
  clientId_in: [String!]
  clientId_lt: String
  clientId_lte: String
  clientId_not: String
  clientId_not_contains: String
  clientId_not_ends_with: String
  clientId_not_in: [String!]
  clientId_not_starts_with: String
  clientId_starts_with: String
  dba: String
  dba_contains: String
  dba_ends_with: String
  dba_gt: String
  dba_gte: String
  dba_in: [String!]
  dba_lt: String
  dba_lte: String
  dba_not: String
  dba_not_contains: String
  dba_not_ends_with: String
  dba_not_in: [String!]
  dba_not_starts_with: String
  dba_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [ClientWhereInput!]
  OR: [ClientWhereInput!]
  positions_every: PositionWhereInput
  positions_none: PositionWhereInput
  positions_some: PositionWhereInput
  stateRef: StateWhereInput
  zipCode: String
  zipCode_contains: String
  zipCode_ends_with: String
  zipCode_gt: String
  zipCode_gte: String
  zipCode_in: [String!]
  zipCode_lt: String
  zipCode_lte: String
  zipCode_not: String
  zipCode_not_contains: String
  zipCode_not_ends_with: String
  zipCode_not_in: [String!]
  zipCode_not_starts_with: String
  zipCode_starts_with: String
}

input ClientWhereUniqueInput {
  clientId: String
  id: ID
}

type Position {
  clientRef(after: String, before: String, first: Int, last: Int, orderBy: ClientOrderByInput, skip: Int, where: ClientWhereInput): [Client!]
  code: ID!
  id: ID!
  name: String!
}

enum PositionOrderByInput {
  code_ASC
  code_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input PositionWhereInput {
  AND: [PositionWhereInput!]
  clientRef_every: ClientWhereInput
  clientRef_none: ClientWhereInput
  clientRef_some: ClientWhereInput
  code: ID
  code_contains: ID
  code_ends_with: ID
  code_gt: ID
  code_gte: ID
  code_in: [ID!]
  code_lt: ID
  code_lte: ID
  code_not: ID
  code_not_contains: ID
  code_not_ends_with: ID
  code_not_in: [ID!]
  code_not_starts_with: ID
  code_starts_with: ID
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [PositionWhereInput!]
  OR: [PositionWhereInput!]
}

type Query {
  activeClients: [Client!]!
  allClients: [Client!]
  client(where: ClientWhereUniqueInput!): Client
}

type State {
  abbreviation: String!
  id: ID!
  name: String!
}

input StateWhereInput {
  abbreviation: String
  abbreviation_contains: String
  abbreviation_ends_with: String
  abbreviation_gt: String
  abbreviation_gte: String
  abbreviation_in: [String!]
  abbreviation_lt: String
  abbreviation_lte: String
  abbreviation_not: String
  abbreviation_not_contains: String
  abbreviation_not_ends_with: String
  abbreviation_not_in: [String!]
  abbreviation_not_starts_with: String
  abbreviation_starts_with: String
  AND: [StateWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [StateWhereInput!]
  OR: [StateWhereInput!]
}
